import { _composition, composition, _parts, _addpart, _removepart, _refs, _addref, _removeref, } from "./shadow-props.js";
const log = console.log;
import _ls from "../ls.js";
const ls = _ls.model.exist;
/** class Exist */
let nextru = { exist: 1, ref: 1 };
const sources = Symbol();
export class Exist {
    runiq = "E" + String(nextru.exist++);
    constructor(composition) {
        this[_composition] = composition;
        this[_composition]?.[_addpart](this);
    }
    /* composition */
    [_composition] = null;
    get [composition]() {
        return this[_composition];
    }
    set [composition](new_com) {
        this[_composition]?.[_removepart](this);
        this[_composition] = new_com;
        this[_composition]?.[_addpart](this);
    }
    /* parts */
    [_parts] = new Set;
    [_addpart](part) {
        this[_parts].add(part);
    }
    [_removepart](part) {
        this[_parts].delete(part);
    }
    /* refs */
    [_refs] = new Set;
    [_addref](ref) {
        this[_refs].add(ref);
    }
    [_removeref](ref) {
        this[_refs].delete(ref);
    }
    /* sources */
    [sources] = new Set;
    /* life */
    terminate() {
        this[sources].forEach(source => source.terminate());
        this[_refs].forEach(ref => ref.notify_terminate());
        this[_parts].forEach(part => part.terminate());
        this[composition] = null;
    }
    /** log */
    logform(event, msg = "") { return `Exist ${this.runiq} ${event} ${msg}`; }
}
(function (Exist) {
    class Ref {
        owner;
        p_acts;
        p_source;
        constructor(owner, p_acts, source) {
            this.owner = owner;
            this.p_acts = p_acts;
            owner[sources].add(this);
            this.p_source = source;
            source[_addref](this);
        }
        runiq = "R" + String(nextru.ref++);
        /* event */
        notify_terminate() {
            this.p_acts?.terminate?.();
        }
        /* life */
        terminate() {
            this.p_source?.[_removeref](this);
            this.owner[sources].delete(this);
            // ls.life.s && log( this.logform( "old" ) );
        }
    }
    Exist.Ref = Ref;
})(Exist || (Exist = {}));
/**  */
export const root = new Exist(null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL21vZGVsL2V4aXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxHQUFhLE1BQU0sbUJBQW1CLENBQUM7QUFDcEksTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4QixPQUFPLEdBQUcsTUFBTSxVQUFVLENBQUM7QUFDM0IsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7QUFFM0Isa0JBQWtCO0FBRWxCLElBQUksTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFFbEMsTUFBTSxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFekIsTUFBTSxPQUFPLEtBQUs7SUFFRCxLQUFLLEdBQVksR0FBRyxHQUFHLE1BQU0sQ0FBRSxNQUFNLENBQUMsS0FBSyxFQUFHLENBQUUsQ0FBRTtJQUVsRSxZQUFhLFdBQTBCO1FBRXRDLElBQUksQ0FBRSxZQUFZLENBQUUsR0FBRyxXQUFXLENBQUM7UUFDbkMsSUFBSSxDQUFFLFlBQVksQ0FBRSxFQUFFLENBQUUsUUFBUSxDQUFFLENBQUUsSUFBSSxDQUFFLENBQUM7SUFDNUMsQ0FBQztJQUdELGlCQUFpQjtJQUVWLENBQUUsWUFBWSxDQUFFLEdBQWtCLElBQUksQ0FBRTtJQUUvQyxJQUFXLENBQUUsV0FBVyxDQUFFO1FBRXpCLE9BQU8sSUFBSSxDQUFFLFlBQVksQ0FBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFXLENBQUUsV0FBVyxDQUFFLENBQUUsT0FBc0I7UUFFakQsSUFBSSxDQUFFLFlBQVksQ0FBRSxFQUFFLENBQUUsV0FBVyxDQUFFLENB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