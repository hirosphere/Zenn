import { Exist } from "../model/exist.js";
import { Leafr } from "../model/leaf.js";
import { defs } from "./defs.js";
import { Parts } from "./parts.js";
import _ls from "../ls.js";
const ls = _ls.dom.nodet;
const log = console.log;
/** class Nodet
 *
 * DOMのElementのプロパティー(クラス名, 属性, スタイル)と要素、Textの値をリアクティブにする委譲クラス。
 *
*/
export class Nodet extends Exist {
    p_node;
    p_element;
    acts;
    pf;
    p_parts;
    constructor(composition, def, ce, rel) {
        super(composition);
        this.p_node = (def instanceof defs.Element) ?
            this.createElement(def) :
            this.createText(def);
        ce?.insertBefore(this.p_node, rel || null);
    }
    /* accessor */
    get node() {
        return this.p_node;
    }
    get e() {
        return this.p_element;
    }
    /* element */
    createElement(def) {
        const e = this.p_element = document.createElement(def.type);
        let { exist, attrs, props, acts, style } = def.echar || {};
        if (def.echar?.class) {
            this.bind_class(e, def.echar.class);
        }
        if (attrs)
            for (const [name, lol] of Object.entries(attrs)) {
                this.bind_leafr(lol, value => setattr(e, name, value));
            }
        if (props)
            for (const [name, lol] of Object.entries(props)) {
                this.bind_leafr(lol, value => e[name] = value);
            }
        if (style)
            for (const [name, lol] of Object.entries(style)) {
                this.bind_leafr(lol, value => e.style[name] = value);
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this.bind_act(e, name, act);
            }
        if (def.parts)
            this.p_parts = new Parts(this, def.parts);
        if (exist) {
            new Exist.Ref(this, { terminate: () => this.terminate() }, exist);
        }
        exist = attrs = props = acts = style = undefined;
        return e;
    }
    bind_class(e, def) {
        if (def instanceof Array)
            def.forEach(item => this.bind_class(e, item));
        else if (typeof def == "string")
            e.className = def;
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                this.bind_leafr(value, value => e.classList.toggle(name, value));
            }
        }
    }
    bind_act(e, name, act) {
        this.acts ??= new Map;
        if (this.acts.has(name))
            this.acts.get(name)?.push(act);
        else
            this.acts.set(name, [act]);
        e.addEventListener(name, act);
    }
    /** text */
    createText(text) {
        const node = document.createTextNode("");
        this.bind_leafr(text, (lettr) => { node.nodeValue = lettr; });
        return node;
    }
    /** リアクティブ核心 */
    bind_leafr(text, update) {
        if (text instanceof Leafr) {
            new Leafr.Ref(this, { new_value: update }, text);
        }
        else
            update(text);
    }
    ;
    /** life */
    terminate() {
        if (this.p_element && this.acts) {
            for (let [name, acts] of this.acts) {
                ls.$("event hdr", (...a) => log(...a, name));
                acts.forEach(act => this.p_element?.removeEventListener(name, act));
            }
        }
        this.p_node?.parentElement?.removeChild(this.p_node);
        this.p_node = undefined;
        this.p_element = undefined;
        this.pf?.pf_term();
        super.terminate();
    }
}
const setattr = (e, name, value) => {
    e.setAttribute(name, String(value));
};
/** */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFRLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLEtBQUssRUFBZ0IsTUFBTSxZQUFZLENBQUE7QUFDaEQsT0FBTyxHQUFHLE1BQU0sVUFBVSxDQUFDO0FBQzNCLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ3pCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFJeEI7Ozs7RUFJRTtBQUVGLE1BQU0sT0FBTyxLQUFNLFNBQVEsS0FBSztJQUVyQixNQUFNLENBQVc7SUFDakIsU0FBUyxDQUFjO0lBQ3ZCLElBQUksQ0FBdUM7SUFDM0MsRUFBRSxDQUFtQjtJQUNyQixPQUFPLENBQVk7SUFFN0IsWUFFQyxXQUFvQixFQUNwQixHQUFzQixFQUN0QixFQUEyQixFQUMzQixHQUFpQjtRQUdqQixLQUFLLENBQUUsV0FBVyxDQUFFLENBQUM7UUFFckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFFLEdBQUcsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFFLENBQUMsQ0FBQztZQUM5QyxJQUFJLENBQUMsYUFBYSxDQUFFLEdBQUcsQ0FBRSxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBRSxHQUFHLENBQUUsQ0FDdEI7UUFFRCxFQUFFLEVBQUUsWUFBWSxDQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLElBQUksQ0FBRSxDQUFDO0lBQzlDLENBQUM7SUFFRCxjQUFjO0lBRWQsSUFBVyxJQUFJO1FBRWQsT0FBTyxJQUFJLENB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