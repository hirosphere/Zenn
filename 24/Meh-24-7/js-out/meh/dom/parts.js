import { Exist, Renn } from "../model/index.js";
import { defs } from "./defs.js";
import { Nodet } from "./nodet.js";
import _ls from "../ls.js";
const ls = _ls.dom.parts;
const log = console.log;
export class Parts extends Renn {
    nodet;
    constructor(nodet, def) {
        super(nodet);
        this.nodet = nodet;
        this.pf = new Reader(this, def).next();
    }
    pf;
    create_part(def, position) {
        const rel = position !== undefined && this.nodet?.e?.childNodes[position] || undefined;
        return new Nodet(this, def, this.nodet?.e || null, rel);
    }
    terminate() {
        this.pf?.pf_term();
        super.terminate();
    }
}
/** 定義リーダー defs.Part [] 型の定義を順次読み、PartFragmentを作成  */
class Reader {
    parts;
    def;
    pos = 0;
    constructor(parts, def) {
        this.parts = parts;
        this.def = def;
    }
    next() {
        return this.next_literal() || this.next_each();
    }
    next_literal() {
        const def = [];
        for (; this.pos < this.def.length; this.pos++) {
            if (this.cur instanceof defs.RennEach)
                break;
            if (this.cur != null)
                def.push(this.cur);
        }
        return def.length && new LiteralPF(def, this) || undefined;
    }
    next_each() {
        const cur = this.cur;
        if (cur instanceof defs.RennEach) {
            // ls.reader.$( "", a => log( `pf.reader ${ this.parts.nodet.runiq } next_each` ) );
            this.pos++;
            return new EachPF(cur, this);
        }
        ;
    }
    get cur() { return this.def[this.pos]; }
}
/** class PartFragment */
export class PartFragment extends Exist {
    reader;
    constructor(reader) {
        super(reader.parts);
        this.reader = reader;
    }
    next;
    get first_node() { return; }
    create_part(def, rel) {
        return new Nodet(this.reader.parts, def, this.reader.parts.nodet.e || null, rel);
    }
    pf_term() {
        this.next?.pf_term();
    }
}
class LiteralPF extends PartFragment {
    def;
    constructor(def, reader) {
        super(reader);
        this.def = def;
        def.forEach(pdef => reader.parts.create_part(pdef));
        this.next = reader.next();
    }
}
class EachPF extends PartFragment {
    def;
    constructor(def, reader) {
        super(reader);
        this.def = def;
        // ls.each.$( "", a => log( "Each PF" ) );
        def.force = (value) => {
            const pdef = def.create?.(value);
            pdef && this.create_part(pdef);
        };
        if (def.source instanceof Array) {
            def.source.forEach(value => this.create_part(def.create?.(value) ?? value));
        }
        if (def.source instanceof Renn) {
            this.source = new Renn.Ref(this, {
                create: (start, orders) => this.insert_parts(start, orders),
                delete: (orders) => this.delete_parts(orders)
            }, def.source);
        }
        this.next = reader.next();
    }
    noteds = new Map;
    source;
    insert_parts(start, orders) {
        const rel = start && this.noteds.get(start)?.node || undefined;
        for (const order of orders) {
            // log( order.source )
            const nodet = this.create_part(this.def.create(order), rel);
            this.noteds.set(order, nodet);
        }
    }
    delete_parts(orders) {
        for (const order of orders) {
            this.noteds.get(order)?.terminate();
            this.noteds.delete(order);
        }
    }
    pf_term() {
        this.source?.terminate();
        super.pf_term();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBUyxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLEdBQUcsTUFBTSxVQUFVLENBQUM7QUFDM0IsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDekIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUl4QixNQUFNLE9BQU8sS0FBTSxTQUFRLElBQWM7SUFFcEI7SUFBcEIsWUFBb0IsS0FBYSxFQUFFLEdBQWtCO1FBRXBELEtBQUssQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUZJLFVBQUssR0FBTCxLQUFLLENBQVE7UUFHaEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBRSxJQUFJLEVBQUUsR0FBRyxDQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDekMsQ0FBQztJQUVTLEVBQUUsQ0FBQztJQUVOLFdBQVcsQ0FBRSxHQUFlLEVBQUUsUUFBbUI7UUFFdkQsTUFBTSxHQUFHLEdBQUcsUUFBUSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUUsUUFBUSxDQUFFLElBQUksU0FBUyxDQUFDO1FBRXpGLE9BQU8sSUFBSSxLQUFLLENBRWYsSUFBSSxFQUNKLEdBQUcsRUFDSCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQ3JCLEdBQUcsQ0FDSCxDQUFDO0lBQ0gsQ0FBQztJQUVlLFNBQVM7UUFFeEIsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FB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