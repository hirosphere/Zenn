import { Exist, Renn } from "../model/index.js";
import { defs } from "./defs.js";
import { Nodet } from "./nodet.js";
import _ls from "../ls.js";
const ls = _ls.dom.parts;
const log = console.log;
export class Parts extends Renn {
    nodet;
    constructor(nodet, def) {
        super(nodet);
        this.nodet = nodet;
        this.pf = new Reader(this, def).next();
    }
    pf;
    create_part(def, position) {
        const rel = position !== undefined && this.nodet?.e?.childNodes[position] || undefined;
        return new Nodet(this, def, this.nodet?.e || null, rel);
    }
    terminate() {
        this.pf?.pf_term();
        super.terminate();
    }
}
/** 定義リーダー defs.Part [] 型の定義を順次読み、PartFragmentを作成  */
class Reader {
    parts;
    def;
    pos = 0;
    constructor(parts, def) {
        this.parts = parts;
        this.def = def;
    }
    next() {
        return this.next_literal() || this.next_each();
    }
    next_literal() {
        const def = [];
        for (; this.pos < this.def.length; this.pos++) {
            if (this.cur instanceof defs.RennEach)
                break;
            if (this.cur != null)
                def.push(this.cur);
        }
        return def.length && new LiteralPF(def, this) || undefined;
    }
    next_each() {
        const cur = this.cur;
        if (cur instanceof defs.RennEach) {
            ls.reader.$("", a => log(`pf.reader ${this.parts.nodet.runiq} next_each`));
            this.pos++;
            return new EachPF(cur, this);
        }
        ;
    }
    get cur() { return this.def[this.pos]; }
}
/** class PartFragment */
export class PartFragment extends Exist {
    reader;
    constructor(reader) {
        super(reader.parts);
        this.reader = reader;
    }
    next;
    get first_node() { return; }
    create_part(def, rel) {
        return new Nodet(this.reader.parts, def, this.reader.parts.nodet.e || null, rel);
    }
    pf_term() {
        this.next?.pf_term();
    }
}
class LiteralPF extends PartFragment {
    def;
    constructor(def, reader) {
        super(reader);
        this.def = def;
        def.forEach(pdef => reader.parts.create_part(pdef));
        this.next = reader.next();
    }
}
class EachPF extends PartFragment {
    def;
    constructor(def, reader) {
        super(reader);
        this.def = def;
        ls.each.$("", a => log("Each PF"));
        def.force = (value) => {
            const pdef = def.create?.(value);
            pdef && this.create_part(pdef);
        };
        if (def.source instanceof Array) {
            def.source.forEach(value => this.create_part(def.create?.(value) ?? value));
        }
        if (def.source instanceof Renn) {
            this.source = new Renn.Ref(this, {
                create: (start, orders) => this.insert_parts(start, orders),
                delete: (orders) => this.delete_parts(orders)
            }, def.source);
        }
        this.next = reader.next();
    }
    noteds = new Map;
    source;
    insert_parts(start, orders) {
        const rel = start && this.noteds.get(start)?.node || undefined;
        for (const order of orders) {
            // log( order.source )
            const nodet = this.create_part(this.def.create(order), rel);
            this.noteds.set(order, nodet);
        }
    }
    delete_parts(orders) {
        for (const order of orders) {
            this.noteds.get(order)?.terminate();
            this.noteds.delete(order);
        }
    }
    pf_term() {
        this.source?.terminate();
        super.pf_term();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBUyxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNuQyxPQUFPLEdBQUcsTUFBTSxVQUFVLENBQUM7QUFDM0IsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7QUFDekIsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUl4QixNQUFNLE9BQU8sS0FBTSxTQUFRLElBQWM7SUFFcEI7SUFBcEIsWUFBb0IsS0FBYSxFQUFFLEdBQWtCO1FBRXBELEtBQUssQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUZJLFVBQUssR0FBTCxLQUFLLENBQVE7UUFHaEMsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBRSxJQUFJLEVBQUUsR0FBRyxDQUFFLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDekMsQ0FBQztJQUVTLEVBQUUsQ0FBQztJQUVOLFdBQVcsQ0FBRSxHQUFlLEVBQUUsUUFBbUI7UUFFdkQsTUFBTSxHQUFHLEdBQUcsUUFBUSxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxVQUFVLENBQUUsUUFBUSxDQUFFLElBQUksU0FBUyxDQUFDO1FBRXpGLE9BQU8sSUFBSSxLQUFLLENBRWYsSUFBSSxFQUNKLEdBQUcsRUFDSCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxJQUFJLEVBQ3JCLEdBQUcsQ0FDSCxDQUFDO0lBQ0gsQ0FBQztJQUVlLFNBQVM7UUFFeEIsSUFBSSxDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FB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