import { _refs_, _set_value_, log } from "../common.js";
import { Leafr } from "./leaf.js";
export class Renn {
    constructor(items) {
        if (items)
            this.new(items);
    }
    length = new Leafr.num(0);
    orders = [];
    [_refs_] = new Set;
    add_ref(ref) {
        this[_refs_].add(ref);
        ref.add({
            src: this,
            start: 0,
            next: this.orders.length,
            orders: this.orders,
        });
    }
    clear() {
        this.remove(0, this.orders.length);
    }
    new(srcs, start) {
        start = pos_trim(start, this.orders);
        const orders = srcs.map(src => new Order(this, src));
        this.orders.splice(start, 0, ...orders);
        this.update_orders(start, this.orders.length);
        const note = {
            src: this,
            start,
            next: start + srcs.length,
            orders,
        };
        this[_refs_].forEach(ref => ref.add(note));
        this.length[_set_value_](this.orders.length);
    }
    remove(start, count) {
        const next = pos_trim(start + count, this.orders);
        start = pos_trim(start, this.orders);
        const orders = this.orders.splice(start, next - start);
        orders.forEach(order => order[_set_renn_]());
        this.update_orders(start, this.orders.length);
        const note = {
            src: this,
            start,
            next,
            orders,
        };
        log(start, next);
        this[_refs_].forEach(ref => ref.remove(note));
        this.length[_set_value_](this.orders.length);
    }
    update_orders(start, next) {
        for (let pos = start; pos < next; pos++) {
            this.orders[pos][_set_value_](pos);
        }
    }
}
const pos_trim = (pos, ar) => {
    if (pos === undefined || pos >= ar.length)
        return ar.length;
    if (pos < 0)
        return 0;
    return pos;
};
(function (Renn) {
    class Ref {
        add(range) { }
        remove(range) { }
    }
    Renn.Ref = Ref;
})(Renn || (Renn = {}));
/* */
export const _set_renn_ = Symbol();
export class Order extends Leafr {
    renn;
    src;
    constructor(renn, src) {
        super(undefined);
        this.renn = renn;
        this.src = src;
    }
    _count_;
    get count() {
        return this._count_ ??= new Leafr.Conv(this, to_count);
    }
    [_set_renn_](renn) {
        this.renn = renn;
    }
    remove() {
        this.value !== undefined &&
            (this.renn?.remove(this.value, 1));
    }
    term() {
        this.renn = undefined;
    }
}
const to_count = (pos) => (typeof pos == "number" ? pos + 1 : pos);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVubi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvcmVubi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEQsT0FBTyxFQUFFLEtBQUssRUFBUSxNQUFNLFdBQVcsQ0FBQztBQUV4QyxNQUFNLE9BQU8sSUFBSTtJQUVoQixZQUFhLEtBQWM7UUFFMUIsSUFBSSxLQUFLO1lBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxLQUFLLENBQUUsQ0FBQztJQUMvQixDQUFDO0lBRWUsTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBRyxDQUFDLENBQUUsQ0FBQztJQUM3QixNQUFNLEdBQW9CLEVBQUUsQ0FBRTtJQUNwQyxDQUFFLE1BQU0sQ0FBRSxHQUFHLElBQUksR0FBc0IsQ0FBRTtJQUUzQyxPQUFPLENBQUUsR0FBb0I7UUFFcEMsSUFBSSxDQUFHLE1BQU0sQ0FBRSxDQUFFLEdBQUcsQ0FBRyxHQUFHLENBQUUsQ0FBRTtRQUU5QixHQUFHLENBQUMsR0FBRyxDQUVOO1lBQ0MsR0FBRyxFQUFHLElBQUk7WUFDVixLQUFLLEVBQUcsQ0FBQztZQUNULElBQUksRUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07WUFDekIsTUFBTSxFQUFHLElBQUksQ0FBQyxNQUFNO1NBQ3BCLENBQ0QsQ0FBQztJQUNILENBQUM7SUFFTSxLQUFLO1FBRVgsSUFBSSxDQUFDLE1BQU0sQ0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBRTtJQUN4QyxDQUFDO0lBRU0sR0FBRyxDQUVULElBQVcsRUFDWCxLQUFtQjtRQUluQixLQUFLLEdBQUcsUUFBUSxDQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUU7UUFFeEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFD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