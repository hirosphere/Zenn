import { _refs_, _set_value_, log } from "../common.js";
import { Leafr } from "./leaf.js";
export class Renn {
    constructor(items) {
        if (items)
            this.new(items);
    }
    orders = [];
    [_refs_] = new Set;
    add_ref(ref) {
        this[_refs_].add(ref);
        ref.add({
            src: this,
            start: 0,
            next: this.orders.length,
        });
    }
    new(srcs, start) {
        start = pos_trim(start, this.orders);
        this.orders.splice(start, 0, ...srcs.map(src => new Order(this, src)));
        this.update_orders(start, this.orders.length);
        const note = {
            src: this,
            start,
            next: start + srcs.length
        };
        this[_refs_].forEach(ref => ref.add(note));
    }
    remove(start, count) {
        const next = pos_trim(start + count, this.orders);
        start = pos_trim(start, this.orders);
        const orders = this.orders.splice(start, next - start);
        orders.forEach(order => order[_set_renn_]());
        this.update_orders(start, this.orders.length);
        const note = {
            src: this,
            start,
            next
        };
        log(start, next);
        this[_refs_].forEach(ref => ref.remove(note));
    }
    update_orders(start, next) {
        for (let pos = start; pos < next; pos++) {
            this.orders[pos][_set_value_](pos);
        }
    }
}
const pos_trim = (pos, ar) => {
    if (pos === undefined || pos >= ar.length)
        return ar.length;
    if (pos < 0)
        return 0;
    return pos;
};
(function (Renn) {
    class Ref {
        add(range) { }
        remove(range) { }
    }
    Renn.Ref = Ref;
})(Renn || (Renn = {}));
/* */
export const _set_renn_ = Symbol();
export class Order extends Leafr {
    renn;
    src;
    constructor(renn, src) {
        super(undefined);
        this.renn = renn;
        this.src = src;
    }
    _count_;
    get count() {
        return this._count_ ??= new Leafr.Conv(this, to_count);
    }
    [_set_renn_](renn) {
        this.renn = renn;
    }
    remove() {
        this.value !== undefined &&
            (this.renn?.remove(this.value, 1));
    }
    term() {
        this.renn = undefined;
    }
}
const to_count = (pos) => (typeof pos == "number" ? pos + 1 : pos);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVubi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvcmVubi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEQsT0FBTyxFQUFFLEtBQUssRUFBUSxNQUFNLFdBQVcsQ0FBQztBQUV4QyxNQUFNLE9BQU8sSUFBSTtJQUVoQixZQUFhLEtBQWM7UUFFMUIsSUFBSSxLQUFLO1lBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBRSxLQUFLLENBQUUsQ0FBQztJQUMvQixDQUFDO0lBRWUsTUFBTSxHQUFvQixFQUFFLENBQUU7SUFDcEMsQ0FBRSxNQUFNLENBQUUsR0FBRyxJQUFJLEdBQXNCLENBQUU7SUFFM0MsT0FBTyxDQUFFLEdBQW9CO1FBRXBDLElBQUksQ0FBRyxNQUFNLENBQUUsQ0FBRSxHQUFHLENBQUcsR0FBRyxDQUFFLENBQUU7UUFFOUIsR0FBRyxDQUFDLEdBQUcsQ0FFTjtZQUNDLEdBQUcsRUFBRyxJQUFJO1lBQ1YsS0FBSyxFQUFHLENBQUM7WUFDVCxJQUFJLEVBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNO1NBQ3pCLENBQ0QsQ0FBQztJQUNGLENBQUM7SUFFSyxHQUFHLENBRVQsSUFBVyxFQUNYLEtBQW1CO1FBSW5CLEtBQUssR0FBRyxRQUFRLENBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBRTtRQUV4QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FFakIsS0FBSyxFQUFFLENBQUMsRUFDUixHQUFJLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssQ0FBRSxJQUFJLEVBQUUsR0FBRyxDQUFFLENBQUUsQ0FDN0MsQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLENBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMs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