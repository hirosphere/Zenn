import { log } from "../common.js";
import { defs } from "./defs.js";
import * as nodet from "./nodet.js";
export const create_place = (ce, def, rel_n) => (next_place(ce, def, 0));
const next_place = (ce, def, pos) => {
    const cur = def[pos];
    if (cur instanceof defs.Place) {
        pos++;
        if (cur instanceof defs.Each) {
            return new EachPlace(ce, cur, def, pos);
        }
        return;
    }
    if (cur !== undefined) {
        return new StaticPlace(ce, def, pos);
    }
};
/* */
export class Place {
    next;
    make_part(df, pdef) {
        if (pdef instanceof nodet.Nodet) {
            pdef.node && df.appendChild(pdef.node);
            return pdef;
        }
        else if (pdef instanceof Node) {
            df.appendChild(pdef);
            return pdef;
        }
        else if (!(pdef instanceof defs.Place)) {
            const text = new nodet.Text(pdef);
            text.node && df.appendChild(text.node);
            return text;
        }
    }
    destruct() { }
}
class StaticPlace extends Place {
    constructor(ce, def, pos) {
        super();
        const df = new DocumentFragment;
        while (pos < def.length) {
            const pdef = def[pos];
            const part = this.make_part(df, pdef);
            this._first_node_ ??=
                (part instanceof Node ?
                    part :
                    part?.node);
            if (!part)
                break;
            pos++;
        }
        ce.appendChild(df);
        this.next = next_place(ce, def, pos);
        this.next && log("stat.next : ", this.next);
    }
    get first_node() {
        return this._first_node_;
    }
    _first_node_;
}
class EachPlace extends Place {
    ce;
    src;
    create_node;
    parts = new Map;
    constructor(ce, def, parts_def, pos) {
        super();
        this.ce = ce;
        this.src = def.source;
        this.create_node = def.create_node;
        def.source.add_ref(this);
        this.next = next_place(ce, parts_def, pos);
        this.next && log("each.next : ", this.next);
    }
    add({ src, start, next }) {
        const df = new DocumentFragment;
        for (let pos = start; pos < next; pos++) {
            const order = src.orders[pos];
            if (this.parts.has(order))
                return;
            const part = this.make_part(df, this.create_node(order));
            const node = part instanceof Node ? part : part?.node;
            node && this.parts.set(order, node);
        }
        const next_ord = this.src.orders[next];
        this.ce.insertBefore(df, (this.parts.get(next_ord) ??
            this.next?.first_node ??
            null));
    }
    remove(range) { }
    get first_node() {
        return this.parts.get(this.src.orders[0]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBR25DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxLQUFLLEtBQUssTUFBTSxZQUFZLENBQUM7QUFFcEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUN6QixDQUNDLEVBQVksRUFDWixHQUFnQixFQUNoQixLQUFjLEVBRUssRUFBRSxDQUN0QixDQUNDLFVBQVUsQ0FBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBRSxDQUN4QixDQUFDO0FBRUYsTUFBTSxVQUFVLEdBQ2hCLENBQ0MsRUFBWSxFQUNaLEdBQWdCLEVBQ2hCLEdBQVksRUFFTyxFQUFFO0lBRXJCLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQztJQUV2QixJQUFJLEdBQUcsWUFBWSxJQUFJLENBQUMsS0FBSyxFQUM3QjtRQUNDLEdBQUcsRUFBRyxDQUFFO1FBRVIsSUFBSSxHQUFHLFlBQVksSUFBSSxDQUFDLElBQUksRUFDNUI7WUFDQyxPQUFPLElBQUksU0FBUyxDQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxDQUFDO1NBQzFDO1FBRUQsT0FBUTtLQUNSO0lBRUQsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUNyQjtRQUNDLE9BQU8sSUFBSSxXQUFXLENBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztLQUN2QztBQUNGLENBQUMsQ0FBQztBQUVGLEtBQUs7QUFHTCxNQUFNLE9BQWdCLEtBQUs7SUFFaEIsSUFBSSxDQUFZO0lBR2hCLFNBQVMsQ0FFbEIsRUFBcUIsRUFDckIsSUFBZ0I7UUFJaEIsSUFBSSxJQUFJLFlBQVksS0FBSyxDQUFDLEtB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