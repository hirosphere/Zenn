import { defs } from "./defs.js";
import * as nodet from "./nodet.js";
export const create_place = (ce, def, rel_n) => (next_place(ce, def, 0));
const next_place = (ce, def, pos) => {
    const cur = def[pos];
    if (cur instanceof defs.Place) {
        pos++;
        if (cur instanceof defs.Each) {
            return new EachPlace(ce, cur, def, pos);
        }
        return;
    }
    if (cur !== undefined) {
        return new StaticPlace(ce, def, pos);
    }
};
/* */
export class Place {
    next;
    make_part(df, pdef) {
        if (pdef instanceof nodet.Nodet) {
            pdef.node && df.appendChild(pdef.node);
            return pdef.node;
        }
        else if (pdef instanceof Node) {
            df.appendChild(pdef);
            return pdef;
        }
        else if (!(pdef instanceof defs.Place)) {
            const text = new nodet.Text(pdef);
            text.node && df.appendChild(text.node);
            return text.node;
        }
    }
    destruct() { }
}
class StaticPlace extends Place {
    constructor(ce, def, pos) {
        super();
        const df = new DocumentFragment;
        while (pos < def.length) {
            const pdef = def[pos];
            const part = this.make_part(df, pdef);
            if (!part)
                break;
            this._first_node_ ??= part;
            pos++;
        }
        ce.appendChild(df);
        this.next = next_place(ce, def, pos);
    }
    get first_node() {
        return this._first_node_;
    }
    _first_node_;
}
class EachPlace extends Place {
    ce;
    src;
    create_node;
    nodes = new Map;
    constructor(ce, def, parts_def, pos) {
        super();
        this.ce = ce;
        this.src = def.source;
        this.create_node = def.create_node;
        def.source.add_ref(this);
        this.next = next_place(ce, parts_def, pos);
    }
    add({ src, start, next }) {
        const df = new DocumentFragment;
        for (let pos = start; pos < next; pos++) {
            const order = src.orders[pos];
            if (this.nodes.has(order))
                return;
            const node = this.make_part(df, this.create_node(order));
            node && this.nodes.set(order, node);
        }
        const next_ord = this.src.orders[next];
        this.ce.insertBefore(df, (this.nodes.get(next_ord) ??
            this.next?.first_node ??
            null));
    }
    remove({ orders }) {
        orders.forEach(order => this.remove_node(order));
    }
    remove_node(order) {
        const node = this.nodes.get(order);
        if (!node)
            return;
        this.ce.removeChild(node);
    }
    get first_node() {
        return this.nodes.get(this.src.orders[0]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sS0FBSyxLQUFLLE1BQU0sWUFBWSxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FDekIsQ0FDQyxFQUFZLEVBQ1osR0FBZ0IsRUFDaEIsS0FBYyxFQUVLLEVBQUUsQ0FDdEIsQ0FDQyxVQUFVLENBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUUsQ0FDeEIsQ0FBQztBQUVGLE1BQU0sVUFBVSxHQUNoQixDQUNDLEVBQVksRUFDWixHQUFnQixFQUNoQixHQUFZLEVBRU8sRUFBRTtJQUVyQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUUsR0FBRyxDQUFFLENBQUM7SUFFdkIsSUFBSSxHQUFHLFlBQVksSUFBSSxDQUFDLEtBQUssRUFDN0IsQ0FBQztRQUNBLEdBQUcsRUFBRyxDQUFFO1FBRVIsSUFBSSxHQUFHLFlBQVksSUFBSSxDQUFDLElBQUksRUFDNUIsQ0FBQztZQUNBLE9BQU8sSUFBSSxTQUFTLENBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFFLENBQUM7UUFDM0MsQ0FBQztRQUVELE9BQVE7SUFDVCxDQUFDO0lBRUQsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUNyQixDQUFDO1FBQ0EsT0FBTyxJQUFJLFdBQVcsQ0FBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxDQUFDO0lBQ3hDLENBQUM7QUFDRixDQUFDLENBQUM7QUFFRixLQUFLO0FBR0wsTUFBTSxPQUFnQixLQUFLO0lBRWhCLElBQUksQ0FBWTtJQUdoQixTQUFTLENBRWxCLEVBQXFCLEVBQ3JCLElBQWdCO1FBSWhCLElBQUksSUFBSSxZQUFZLEtBQUssQ0FBQyxLQUFLLEVBQy9CLENB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