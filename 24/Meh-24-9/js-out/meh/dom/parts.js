import { log } from "../common.js";
import { defs } from "./defs.js";
import * as nodet from "./nodet.js";
export const create_place = (ce, df, def) => (next_place(ce, df, def, 0));
const next_place = (ce, df, def, pos) => {
    const cur = def[pos];
    if (cur instanceof defs.Place) {
        pos++;
        if (cur instanceof defs.Each) {
            return new EachPlace(ce, df, cur, def, pos);
        }
        return;
    }
    if (cur !== undefined) {
        return new StaticPlace(ce, df, def, pos);
    }
};
/* */
export class Place {
    next;
    make_part(df, pdef) {
        let is_period = false;
        if (pdef instanceof nodet.Nodet) {
            pdef.node && df.appendChild(pdef.node);
        }
        else if (pdef instanceof Node) {
            df.appendChild(pdef);
        }
        else if (!(pdef instanceof defs.Place)) {
            const n = new nodet.Text(pdef);
            n.node && df.appendChild(n.node);
        }
        else
            is_period = true;
        return is_period;
    }
    destruct() { }
}
class StaticPlace extends Place {
    constructor(ce, df, def, pos) {
        super();
        while (pos < def.length) {
            const pdef = def[pos];
            if (this.make_part(df, pdef)) {
                break;
            }
            pos++;
        }
        this.next = next_place(ce, df, def, pos);
    }
}
class EachPlace extends Place {
    constructor(ce, df, edef, def, pos) {
        super();
        log("EachPlace", edef.source.items);
        edef.source.items.forEach(value => this.make_part(df, edef.create_node(value)));
        this.next = next_place(ce, df, def, pos);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRW5DLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxLQUFLLEtBQUssTUFBTSxZQUFZLENBQUM7QUFFcEMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUN6QixDQUNDLEVBQVksRUFDWixFQUFxQixFQUNyQixHQUFnQixFQUVHLEVBQUUsQ0FDdEIsQ0FDQyxVQUFVLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFFLENBQzVCLENBQUM7QUFFRixNQUFNLFVBQVUsR0FDaEIsQ0FDQyxFQUFZLEVBQ1osRUFBcUIsRUFDckIsR0FBZ0IsRUFDaEIsR0FBWSxFQUVPLEVBQUU7SUFFckIsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFDO0lBRXZCLElBQUksR0FBRyxZQUFZLElBQUksQ0FBQyxLQUFLLEVBQzdCO1FBQ0MsR0FBRyxFQUFHLENBQUU7UUFFUixJQUFJLEdBQUcsWUFBWSxJQUFJLENBQUMsSUFBSSxFQUM1QjtZQUNDLE9BQU8sSUFBSSxTQUFTLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxDQUFDO1NBQzlDO1FBRUQsT0FBUTtLQUNSO0lBRUQsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUNyQjtRQUNDLE9BQU8sSUFBSSxXQUFXLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFFLENBQUM7S0FDM0M7QUFDRixDQUFDLENBQUM7QUFFRixLQUFLO0FBR0wsTUFBTSxPQUFPLEtBQUs7SUFFUCxJQUFJLENBQVk7SUFFaEIsU0FBUyxDQUVsQixFQUFxQixFQUNyQixJQUFnQjtRQUloQixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUE7UUFFckIsSUFBSSxJQUFJLFlBQVksS0FBSyxDQUFDLEtBQUssRUFDL0I7WUFDQyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO1NBQ3pDO2FBRUksSUFBSSxJQUFJLFlBQVksSUFBSSxFQUM3QjtZQUNDLEVBQUUsQ0FBQyxXQUFXLENBQUUsSUFBSSxDQUFFLENBQUM7U0FDdkI7YUFFSSxJQUFJLENBQUUsQ0FBRSxJQUFJLFlBQVksSUFBSSxDQUFDLEtBQUssQ0FBRSxFQUN6QztZQUNDLE1BQU0sQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBRTtZQUNsQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBRSxDQUFFO1NBQ3BDOztZQUVJLFNBQVMsR0FBRyxJQUFJLENBQUU7UUFFdkIsT0FBTyxTQUFTLENBQUU7SUFDbkIsQ0FBQztJQUVNLFFBQVEsS0FDZCxDQUFDO0NBQ0Y7QUFJRCxNQUFNLFdBQVksU0FBUSxLQUFLO0lBRTlCLFlBRUMsRUFBWSxFQUNaLEVBQXFCLEVBQ3JCLEdBQWdCLEVBQ2hCLEdBQVk7UUFJWixLQUFLLEVBQUUsQ0FBQztRQUVSLE9BQU8sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQ3ZCO1lBQ0MsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFFO1lBRXpCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBRSxFQUFFLEVBQUUsSUFBSSxDQUFFLEVBQzlCO2dCQUNDLE1BQU87YUFDUDtZQUVELEdBQUcsRUFBRyxDQUFFO1NBQ1I7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsQ0FBQztJQUM1QyxDQUFDO0NBQ0Q7QUFHRCxNQUFNLFNBQVUsU0FBUSxLQUFLO0lBRTVCLFlBRUMsRUFBWSxFQUNaLEVBQXFCLEVBQ3JCLElBQWdCLEVBQ2hCLEdBQWdCLEVBQ2hCLEdBQVk7UUFHWixLQUFLLEVBQUUsQ0FBQztRQUVSLEdBQUcsQ0FBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUUsQ0FBQTtRQUVyQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBRXhCLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FFdEIsRUFBRSxFQUNGLElBQUksQ0FBQyxXQUFXLENBQUUsS0FBSyxDQUFFLENBQ3pCLENBQ0QsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBRSxDQUFDO0lBQzVDLENBQUM7Q0FDRCJ9