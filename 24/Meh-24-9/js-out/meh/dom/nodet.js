import { log } from "../common.js";
import { Leaf } from "../model/leaf.js";
import { PartsColl } from "./parts.js";
export class Nodet {
    bind(value, update) {
        if (value instanceof Leaf) {
            const ref = new Leaf.Ref();
            ref.on_value_change = () => update(value.value);
            ref.src = value;
            this.srcs.add(ref);
        }
        else
            update(value);
    }
    _destruct(isroot) {
        this.srcs.forEach(ref => ref.term());
    }
    destruct() {
        this._destruct(true);
    }
    srcs = new Set;
}
export class Element extends Nodet {
    constructor(args) {
        super();
        const { ns, type, parts } = args;
        const { class: cname, style, attrs, props, acts, actActs: actacts } = args;
        this._el_ =
            (ns ?
                document.createElementNS(ns, type) :
                document.createElement(type));
        if (cname)
            this.binb_class(this._el_, cname);
        if (style && this._el_ instanceof HTMLElement)
            for (const [name, value] of Object.entries(style)) {
                this.bind(value, value => this._el_);
            }
        if (attrs)
            for (const [name, value] of Object.entries(attrs)) {
                this.bind(value, value => set_attr(this._el_, name, value));
            }
        if (props && this._el_)
            for (const [name, value] of Object.entries(props)) {
                this.bind(value, value => {
                    this._el_[name] = value;
                });
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this._el_.addEventListener(name, act);
            }
        if (parts) {
            const df = document.createDocumentFragment();
            this.parts = new PartsColl(this._el_, df, parts);
            this._el_.appendChild(df);
        }
    }
    parts;
    get node() {
        return this._el_;
    }
    _el_;
    binb_class(e, def) {
        if (typeof def == "string") {
            log("class", def);
            e.className += " " + def;
            return;
        }
        if (def instanceof Array) {
            def.forEach(def => this.binb_class(e, def));
            return;
        }
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.classList.toggle(name, value));
        }
    }
    _destruct() {
        this.parts?.destruct();
        this._el_ = undefined;
        super._destruct();
    }
}
const set_attr = (e, name, value) => {
    log("attr", value, typeof e);
    if (!e)
        return;
    if (value === false)
        e.removeAttribute(name);
    else
        e.setAttribute(name, value);
};
export class Text extends Nodet {
    constructor(text) {
        super();
        this._node_ = document.createTextNode("");
        this.bind(text, value => {
            if (this._node_)
                this._node_.nodeValue = value;
        });
    }
    get node() {
        return this._node_;
    }
    _node_;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBV3ZDLE1BQU0sT0FBZ0IsS0FBSztJQUloQixJQUFJLENBRWIsS0FBbUIsRUFDbkIsTUFBZ0M7UUFHaEMsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUN6QjtZQUNDLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxlQUFlLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFFLEtBQUssQ0FBQyxLQUFLLENBQUUsQ0FBRTtZQUNuRCxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztZQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQztTQUNyQjs7WUFFSyxNQUFNLENBQUUsS0FBSyxDQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVTLFNBQVMsQ0FBRSxNQUFlO1FBRW5DLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVNLFFBQVE7UUFFZCxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBRSxDQUFDO0lBQ3hCLENBQUM7SUFFUyxJQUFJLEdBQUcsSUFBSSxHQUF3QixDQUFFO0NBQy9DO0FBRUQsTUFBTSxPQUFPLE9BQVEsU0FBUSxLQUFLO0lBRWpDLFlBQWEsSUFBYztRQUUxQixLQUFLLEVBQUUsQ0FBQztRQUVSLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFB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