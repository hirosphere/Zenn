import { log } from "../common.js";
import { Leaf } from "../model/leaf.js";
import { PartsColl } from "./parts.js";
export class Nodet {
    bind(value, update) {
        if (value instanceof Leaf) {
            const ref = new Leaf.Ref();
            ref.on_value_change = () => update(value.value);
            ref.src = value;
            this.srcs.add(ref);
        }
        else
            update(value);
    }
    _destruct(isroot) {
        this.srcs.forEach(ref => ref.term());
    }
    destruct() {
        this._destruct(true);
    }
    srcs = new Set;
}
export class Element extends Nodet {
    // protected _el_? : HTMLElement ;
    _el_;
    parts;
    constructor(args) {
        super();
        const { ns, type, parts } = args;
        const { class: cname, style, attrs, props, acts, actActs: actacts } = args;
        let el = this._el_ =
            (ns ?
                document.createElementNS(ns, type) :
                document.createElement(type));
        if (cname)
            this.binb_class(this._el_, cname);
        if (style && this._el_ instanceof HTMLElement)
            for (const [name, value] of Object.entries(style)) {
                this.bind(value, value => this._el_);
            }
        if (attrs)
            for (const [name, value] of Object.entries(attrs)) {
                this.bind(value, value => set_attr(this._el_, name, value));
            }
        if (props && this._el_)
            for (const [name, value] of Object.entries(props)) {
                this.bind(value, value => {
                    this._el_[name] = value;
                });
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this._el_.addEventListener(name, act);
            }
        if (parts) {
            const df = document.createDocumentFragment();
            this.parts = new PartsColl(this._el_, df, parts);
            this._el_.appendChild(df);
        }
    }
    get node() {
        return this._el_;
    }
    binb_class(e, def) {
        if (typeof def == "string") {
            log("class", def);
            e.className += " " + def;
            return;
        }
        if (def instanceof Array) {
            def.forEach(def => this.binb_class(e, def));
            return;
        }
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.classList.toggle(name, value));
        }
    }
    _destruct() {
        this.parts?.destruct();
        this._el_ = undefined;
        super._destruct();
    }
}
const set_attr = (e, name, value) => {
    log("attr", value, typeof e);
    if (!e)
        return;
    if (value === false)
        e.removeAttribute(name);
    else
        e.setAttribute(name, value);
};
export class Text extends Nodet {
    constructor(text) {
        super();
        this._node_ = document.createTextNode("");
        this.bind(text, value => {
            if (this._node_)
                this._node_.nodeValue = value;
        });
    }
    get node() {
        return this._node_;
    }
    _node_;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBV3ZDLE1BQU0sT0FBZ0IsS0FBSztJQUloQixJQUFJLENBRWIsS0FBbUIsRUFDbkIsTUFBZ0M7UUFHaEMsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUN6QjtZQUNDLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQzNCLEdBQUcsQ0FBQyxlQUFlLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFFLEtBQUssQ0FBQyxLQUFLLENBQUUsQ0FBRTtZQUNuRCxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztZQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQztTQUNyQjs7WUFFSyxNQUFNLENBQUUsS0FBSyxDQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVTLFNBQVMsQ0FBRSxNQUFlO1FBRW5DLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVNLFFBQVE7UUFFZCxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBRSxDQUFDO0lBQ3hCLENBQUM7SUFFUyxJQUFJLEdBQUcsSUFBSSxHQUF3QixDQUFFO0NBQy9DO0FBRUQsTUFBTSxPQUFPLE9BQVEsU0FBUSxLQUFLO0lBRWpDLGtDQUFrQztJQUN4QixJQUFJLENBQXdCO0lBQzVCLEtBQUssQ0FBQztJQUVoQixZQUFhLElBQWM7UUFF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