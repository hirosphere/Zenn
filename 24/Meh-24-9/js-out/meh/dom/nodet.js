import { log } from "../common.js";
import { Leaf } from "../model/leaf.js";
import { create_place } from "./parts.js";
export const add = (part, com_qe, rel_qe) => {
    const com_e = typeof com_qe == "string" ? document.querySelector(com_qe) : com_qe || null;
    const rel_e = typeof rel_qe == "string" ? document.querySelector(rel_qe) : rel_qe || null;
    if (part instanceof Element) {
        com_e && part.node && com_e.insertBefore(part.node, rel_e);
    }
};
export class Nodet {
    bind(value, update) {
        if (value instanceof Leaf) {
            const ref = new Leaf.Ref();
            ref.on_value_change = () => update(value.value);
            ref.src = value;
            this.srcs.add(ref);
        }
        else
            update(value);
    }
    _destruct(isroot) {
        this.srcs.forEach(ref => ref.term());
    }
    destruct() {
        this._destruct(true);
    }
    srcs = new Set;
}
export class Element extends Nodet {
    // protected _el_? : HTMLElement ;
    _el_;
    parts;
    constructor(args) {
        super();
        const { ns, type, parts } = args;
        const { class: cname, style, attrs, props, acts, actActs: actacts } = args;
        let el = this._el_ =
            (ns ?
                document.createElementNS(ns, type) :
                document.createElement(type));
        if (cname)
            this.binb_class(this._el_, cname);
        if (style && this._el_ instanceof HTMLElement) {
            this.bind_style(this._el_, style);
        }
        if (attrs)
            for (const [name, value] of Object.entries(attrs)) {
                this.bind(value, value => set_attr(this._el_, name, value));
            }
        if (props && this._el_)
            for (const [name, value] of Object.entries(props)) {
                this.bind(value, value => {
                    this._el_[name] = value;
                });
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this._el_.addEventListener(name, act);
            }
        if (parts) {
            const df = document.createDocumentFragment();
            // this.parts = new PartsColl( this._el_, df, parts );
            this.parts = create_place(this._el_, df, parts);
            this._el_.appendChild(df);
        }
    }
    get node() {
        return this._el_;
    }
    binb_class(e, def) {
        if (typeof def == "string") {
            log("class", def);
            e.className += " " + def;
            return;
        }
        if (def instanceof Array) {
            def.forEach(def => this.binb_class(e, def));
            return;
        }
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.classList.toggle(name, value));
        }
    }
    bind_style(e, def) {
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.style.setProperty(name, value));
        }
    }
    _destruct() {
        this.parts?.destruct();
        this._el_ = undefined;
        super._destruct();
    }
}
const set_attr = (e, name, value) => {
    if (!e)
        return;
    if (value === false)
        e.removeAttribute(name);
    else
        e.setAttribute(name, value);
};
export class Text extends Nodet {
    constructor(text) {
        super();
        this._node_ = document.createTextNode("");
        this.bind(text, value => {
            if (this._node_)
                this._node_.nodeValue = value;
        });
    }
    get node() {
        return this._node_;
    }
    _node_;
}
const ents = Object.entries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRTFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FDaEIsQ0FDQyxJQUFnQixFQUNoQixNQUFvQyxFQUNwQyxNQUFtQyxFQUU1QixFQUFFO0lBRVQsTUFBTSxLQUFLLEdBQStCLE9BQU8sTUFBTSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBRSxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztJQUN4SCxNQUFNLEtBQUssR0FBNEIsT0FBTyxNQUFNLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFFLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO0lBRXJILElBQUksSUFBSSxZQUFZLE9BQU8sRUFDM0I7UUFDQyxLQUFLLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFFLENBQUE7S0FDNUQ7QUFDRixDQUFDLENBQUM7QUFZRixNQUFNLE9BQWdCLEtBQUs7SUFJaEIsSUFBSSxDQUViLEtBQW1CLEVBQ25CLE1BQWdDO1FBR2hDLElBQUksS0FBSyxZQUFZLElBQUksRUFDekI7WUFDQyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUMzQixHQUFHLENBQUMsZUFBZSxHQUFHLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBRSxLQUFLLENB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