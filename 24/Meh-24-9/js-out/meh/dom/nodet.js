import { log } from "../common.js";
import { Leaf } from "../model/leaf.js";
import { Parts } from "./parts.js";
export class Nodet {
    constructor(args) {
        /* Text */
        if ("text" in args) {
            this._node_ = document.createTextNode("");
            this.bind(args.text, value => {
                if (this._node_)
                    this._node_.nodeValue = value;
            });
            return;
        }
        /* Element */
        const { ns, type, parts } = args;
        const { class: cname, style, attrs, props, acts, actacts } = args;
        this._el_ =
            this._node_ =
                (ns ?
                    document.createElementNS(ns, type) :
                    document.createElement(type));
        if (cname)
            this.binb_class(this._el_, cname);
        if (style && this._el_ instanceof HTMLElement)
            for (const [name, value] of Object.entries(style)) {
                this.bind(value, value => this._el_);
            }
        if (attrs)
            for (const [name, value] of Object.entries(attrs)) {
                this.bind(value, value => set_attr(this._el_, name, value));
            }
        if (props && this._el_)
            for (const [name, value] of Object.entries(props)) {
                this.bind(value, value => {
                    this._el_[name] = value;
                });
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this._el_.addEventListener(name, act);
            }
        if (parts) {
            const df = document.createDocumentFragment();
            this.parts = new Parts(parts, df);
            this._el_.appendChild(df);
        }
    }
    parts;
    get node() {
        return this._node_;
    }
    _node_;
    get el() {
        return this._el_;
    }
    _el_;
    srcs = new Set;
    binb_class(e, def) {
        if (typeof def == "string") {
            log("class", def);
            e.className += " " + def;
            return;
        }
        if (def instanceof Array) {
            def.forEach(def => this.binb_class(e, def));
            return;
        }
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.classList.toggle(name, value));
        }
    }
    bind(value, update) {
        if (value instanceof Leaf) {
            const ref = new Leaf.Ref();
            ref.on_value_change = () => update(value.value);
            ref.src = value;
            this.srcs.add(ref);
        }
        else
            update(value);
    }
    destruct() {
        this.srcs.forEach(ref => ref.term());
        this._node_ = undefined;
    }
}
const set_attr = (e, name, value) => {
    log("attr", value, typeof e);
    if (!e)
        return;
    if (value === false)
        e.removeAttribute(name);
    else
        e.setAttribute(name, value);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBV25DLE1BQU0sT0FBTyxLQUFLO0lBRWpCLFlBQWEsSUFBMEI7UUFFdEMsVUFBVTtRQUVWLElBQUksTUFBTSxJQUFJLElBQUksRUFDbEI7WUFDQyxJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUUsRUFBRSxDQUFFLENBQUM7WUFDNUMsSUFBSSxDQUFDLElBQUksQ0FFUixJQUFJLENBQUMsSUFBSSxFQUNULEtBQUssQ0FBQyxFQUFFO2dCQUVQLElBQUksSUFBSSxDQUFDLE1BQU07b0JBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFBO1lBQ2hELENBQUMsQ0FDRCxDQUFDO1lBQ0YsT0FBTztTQUNQO1FBR0QsYUFBYTtRQUViLE1BQU0sRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQztRQUNqQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBRWxFLElBQUksQ0FBQyxJQUFJO1lBQ1QsSUFBSSxDQUFDLE1BQU07Z0JBQ1gsQ0FDQyxFQUFFLENBQUMsQ0FBQztvQkFDSCxRQUFRLENBQUMsZUFBZSxDQUFFLEVBQUUsRUFBRSxJQUFJLENBQUUsQ0FBQyxDQUFDO29CQUN0QyxRQUFRLENBQUMsYUFBYSxDQUFFLElBQUksQ0FBRSxDQUMvQixDQUFDO1FBRUYsSUFB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