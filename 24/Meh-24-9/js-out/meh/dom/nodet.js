import { _add_ref_ } from "../common.js";
import { Budr } from "../model/leaf.js";
import { create_place } from "./parts.js";
export const add = (part, com_qe, rel_qn) => {
    const com_e = typeof com_qe == "string" ? document.querySelector(com_qe) : com_qe || null;
    const rel_n = typeof rel_qn == "string" ? document.querySelector(rel_qn) : rel_qn || null;
    if (!com_e)
        return;
    const df = new DocumentFragment();
    const parts = create_place(com_e, part instanceof Array ? part : [part]);
};
export class Nodet {
    bind(value, update) {
        if (value instanceof Budr) {
            const ref = new Budr.Ref(value, update);
            this.srcs.add(ref);
            value[_add_ref_](ref);
        }
        else
            update(value);
    }
    _destruct(isroot) {
        this.srcs.forEach(ref => ref.term());
    }
    destruct() {
        this._destruct(true);
    }
    srcs = new Set;
}
export class Element extends Nodet {
    // protected _el_? : HTMLElement ;
    _el_;
    parts;
    constructor(args) {
        super();
        const { ns, type, parts } = args;
        const { class: class_name, style, attrs, props, acts, actActs: actacts } = args;
        let el = this._el_ =
            (ns ?
                document.createElementNS(ns, type) :
                document.createElement(type));
        if (class_name)
            this.bind_class(this._el_, class_name);
        if (style && this._el_ instanceof HTMLElement) {
            this.bind_style(this._el_, style);
        }
        if (attrs)
            for (const [name, value] of Object.entries(attrs)) {
                this.bind(value, value => set_attr(this._el_, name, value));
            }
        if (props && this._el_)
            for (const [name, value] of Object.entries(props)) {
                this.bind(value, value => {
                    this._el_[name] = value;
                });
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this._el_.addEventListener(name, act);
            }
        if (parts) {
            this.parts = create_place(this._el_, parts);
        }
    }
    get node() {
        return this._el_;
    }
    bind_class(e, def) {
        if (typeof def == "string") {
            e.className += " " + def;
            return;
        }
        if (def instanceof Array) {
            def.forEach(def => this.bind_class(e, def));
            return;
        }
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.classList.toggle(name, value));
        }
    }
    bind_style(e, def) {
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.style[name] = String(value));
        }
    }
    _destruct() {
        this.parts?.destruct();
        this._el_ = undefined;
        super._destruct();
    }
}
const set_attr = (e, name, value) => {
    if (!e)
        return;
    if (value === false)
        e.removeAttribute(name);
    else
        e.setAttribute(name, value);
};
export class Text extends Nodet {
    constructor(text) {
        super();
        this._node_ = document.createTextNode("");
        this.bind(text, value => {
            if (this._node_) {
                this._node_.nodeValue = value ?? "";
            }
        });
    }
    get node() {
        return this._node_;
    }
    _node_;
}
const ents = Object.entries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFPLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxJQUFJLEVBQWMsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSzFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FDaEIsQ0FDQyxJQUErQixFQUMvQixNQUFvQixFQUNwQixNQUFzQixFQUVmLEVBQUU7SUFFVCxNQUFNLEtBQUssR0FBZSxPQUFPLE1BQU0sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUUsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7SUFDeEcsTUFBTSxLQUFLLEdBQWUsT0FBTyxNQUFNLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFFLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO0lBRXhHLElBQUksQ0FBRSxLQUFLO1FBQUksT0FBUTtJQUV2QixNQUFNLEVBQUUsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7SUFDbEMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUV6QixLQUFLLEVBQ0wsSUFBSSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBRSxDQUN2QyxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBWUYsTUFBTSxPQUFnQixLQUFLO0lBSWhCLElBQUksQ0FFYixLQUFtQixFQUNuQixNQUFnQztRQUdoQyxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQ3pCO1lBQ0MsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUV2QixL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