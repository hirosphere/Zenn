import { log } from "../common.js";
import { Leaf } from "../model/leaf.js";
import { create_place } from "./parts.js";
export const add = (part, com_qe, rel_qn) => {
    const com_e = typeof com_qe == "string" ? document.querySelector(com_qe) : com_qe || null;
    const rel_n = typeof rel_qn == "string" ? document.querySelector(rel_qn) : rel_qn || null;
    if (!com_e)
        return;
    if (part instanceof Array) {
        part.forEach(p => add_node(p, com_e, rel_n));
    }
    else {
        add_node(part, com_e, rel_n);
    }
};
const add_node = (part, com_e, rel_n) => {
    if (part instanceof Nodet) {
        part.node && com_e.insertBefore(part.node, rel_n);
    }
    else if (part instanceof Leaf) {
        ;
    }
    else if (part instanceof globalThis.Node) {
        com_e.insertBefore(part, rel_n);
    }
};
export class Nodet {
    bind(value, update) {
        if (value instanceof Leaf) {
            const ref = new Leaf.Ref();
            ref.on_value_change = () => update(value.value);
            ref.src = value;
            this.srcs.add(ref);
        }
        else
            update(value);
    }
    _destruct(isroot) {
        this.srcs.forEach(ref => ref.term());
    }
    destruct() {
        this._destruct(true);
    }
    srcs = new Set;
}
export class Element extends Nodet {
    // protected _el_? : HTMLElement ;
    _el_;
    parts;
    constructor(args) {
        super();
        const { ns, type, parts } = args;
        const { class: cname, style, attrs, props, acts, actActs: actacts } = args;
        let el = this._el_ =
            (ns ?
                document.createElementNS(ns, type) :
                document.createElement(type));
        if (cname)
            this.bind_class(this._el_, cname);
        if (style && this._el_ instanceof HTMLElement) {
            this.bind_style(this._el_, style);
        }
        if (attrs)
            for (const [name, value] of Object.entries(attrs)) {
                this.bind(value, value => set_attr(this._el_, name, value));
            }
        if (props && this._el_)
            for (const [name, value] of Object.entries(props)) {
                this.bind(value, value => {
                    this._el_[name] = value;
                });
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this._el_.addEventListener(name, act);
            }
        if (parts) {
            const df = document.createDocumentFragment();
            // this.parts = new PartsColl( this._el_, df, parts );
            this.parts = create_place(this._el_, df, parts);
            this._el_.appendChild(df);
        }
    }
    get node() {
        return this._el_;
    }
    bind_class(e, def) {
        if (typeof def == "string") {
            log("class", def);
            e.className += " " + def;
            return;
        }
        if (def instanceof Array) {
            def.forEach(def => this.bind_class(e, def));
            return;
        }
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.classList.toggle(name, value));
        }
    }
    bind_style(e, def) {
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, 
            // value => e.style.setProperty( name, value )
            value => e.style[name] = String(value));
        }
    }
    _destruct() {
        this.parts?.destruct();
        this._el_ = undefined;
        super._destruct();
    }
}
const set_attr = (e, name, value) => {
    if (!e)
        return;
    if (value === false)
        e.removeAttribute(name);
    else
        e.setAttribute(name, value);
};
export class Text extends Nodet {
    constructor(text) {
        super();
        this._node_ = document.createTextNode("");
        this.bind(text, value => {
            if (this._node_)
                this._node_.nodeValue = value;
        });
    }
    get node() {
        return this._node_;
    }
    _node_;
}
const ents = Object.entries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxJQUFJLEVBQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSzFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FDaEIsQ0FDQyxJQUErQixFQUMvQixNQUFvQixFQUNwQixNQUFzQixFQUVmLEVBQUU7SUFFVCxNQUFNLEtBQUssR0FBZSxPQUFPLE1BQU0sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUUsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7SUFDeEcsTUFBTSxLQUFLLEdBQWUsT0FBTyxNQUFNLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFFLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO0lBRXhHLElBQUksQ0FBRSxLQUFLO1FBQUksT0FBUTtJQUV2QixJQUFJLElBQUksWUFBWSxLQUFLLEVBQ3pCO1FBQ0MsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7S0FDakQ7U0FHRDtRQUNDLFFBQVEsQ0FBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBRSxDQUFDO0tBQy9CO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQ2QsQ0FDQyxJQUFnQixFQUNoQixLQUFVLEVBQ1YsS0FBaUIsRUFDaEIsRUFBRTtJQUVILElBQUksSUFBSSxZQUFZLEtBQUssRUFDekI7UUFDQyxJ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