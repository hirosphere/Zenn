import { _add_ref_ } from "../common.js";
import { Leafr } from "../model/leaf.js";
import { create_place } from "./parts.js";
export const add = (part, com_qe, rel_qn) => {
    const com_e = typeof com_qe == "string" ? document.querySelector(com_qe) : com_qe || null;
    const rel_n = typeof rel_qn == "string" ? document.querySelector(rel_qn) : rel_qn || null;
    if (!com_e)
        return;
    const df = new DocumentFragment();
    const parts = create_place(com_e, part instanceof Array ? part : [part]);
};
export class Nodet {
    bind(value, update) {
        if (value instanceof Leafr) {
            const ref = new Leafr.Ref(value, update);
            this.srcs.add(ref);
            value[_add_ref_](ref);
        }
        else
            update(value);
    }
    _destruct(isroot) {
        this.srcs.forEach(ref => ref.term());
    }
    destruct() {
        this._destruct(true);
    }
    srcs = new Set;
}
export class Element extends Nodet {
    // protected _el_? : HTMLElement ;
    _el_;
    parts;
    constructor(args) {
        super();
        const { ns, type, parts } = args;
        const { class: class_name, style, attrs, props, acts, actActs: actacts } = args;
        let el = this._el_ =
            (ns ?
                document.createElementNS(ns, type) :
                document.createElement(type));
        if (class_name)
            this.bind_class(this._el_, class_name);
        if (style && this._el_ instanceof HTMLElement) {
            this.bind_style(this._el_, style);
        }
        if (attrs)
            for (const [name, value] of Object.entries(attrs)) {
                this.bind(value, value => set_attr(this._el_, name, value));
            }
        if (props && this._el_)
            for (const [name, value] of Object.entries(props)) {
                this.bind(value, value => {
                    this._el_[name] = value;
                });
            }
        if (acts)
            for (const [name, act] of Object.entries(acts)) {
                this._el_.addEventListener(name, act);
            }
        if (parts) {
            this.parts = create_place(this._el_, parts);
        }
    }
    get node() {
        return this._el_;
    }
    bind_class(e, def) {
        if (typeof def == "string") {
            e.className += " " + def;
            return;
        }
        if (def instanceof Array) {
            def.forEach(def => this.bind_class(e, def));
            return;
        }
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.classList.toggle(name, value));
        }
    }
    bind_style(e, def) {
        for (const [name, value] of Object.entries(def)) {
            this.bind(value, value => e.style[name] = String(value));
        }
    }
    _destruct() {
        this.parts?.destruct();
        this._el_ = undefined;
        super._destruct();
    }
}
const set_attr = (e, name, value) => {
    if (!e)
        return;
    if (value === false)
        e.removeAttribute(name);
    else
        e.setAttribute(name, value);
};
export class Text extends Nodet {
    constructor(text) {
        super();
        this._node_ = document.createTextNode("");
        this.bind(text, value => {
            if (this._node_) {
                this._node_.nodeValue = value ?? "";
            }
        });
    }
    get node() {
        return this._node_;
    }
    _node_;
}
const ents = Object.entries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFPLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxLQUFLLEVBQU8sTUFBTSxrQkFBa0IsQ0FBQztBQUU5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSzFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FDaEIsQ0FDQyxJQUErQixFQUMvQixNQUFvQixFQUNwQixNQUFzQixFQUVmLEVBQUU7SUFFVCxNQUFNLEtBQUssR0FBZSxPQUFPLE1BQU0sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUUsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7SUFDeEcsTUFBTSxLQUFLLEdBQWUsT0FBTyxNQUFNLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFFLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO0lBRXhHLElBQUksQ0FBRSxLQUFLO1FBQUksT0FBUTtJQUV2QixNQUFNLEVBQUUsR0FBRyxJQUFJLGdCQUFnQixFQUFFLENBQUM7SUFDbEMsTUFBTSxLQUFLLEdBQUcsWUFBWSxDQUV6QixLQUFLLEVBQ0wsSUFBSSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBRSxDQUN2QyxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBWUYsTUFBTSxPQUFnQixLQUFLO0lBSWhCLElBQUksQ0FFYixLQUFtQixFQUNuQixNQUFnQztRQUdoQyxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQzFCLENBQUM7WUFDQSxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENB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