const log = console.log;
export const iss = (value) => (typeof value == "string");
export const isn = (value) => (typeof value == "number");
export const isb = (value) => (typeof value == "boolean");
export class Leaf {
    _value;
    rel;
    refs = new Set;
    constructor(value, args) {
        this._value = value;
        this.rel = args?.rel;
    }
    // ref //
    tostr(toref) {
        return new ToStrImpl(this, toref);
    }
    ref(update) {
        const ref = new RefImpl(this, update);
        this.refs.add(ref);
        return ref;
    }
    removeref(ref) {
        this.refs.delete(ref);
    }
    // value //
    get value() { return this._value; }
    set value(value) { this.set(value); }
    get() { return this._value; }
    set(value, sender) {
        if (value === this._value)
            return;
        const old = this._value;
        this._value = value;
        this.rel?.();
        this.refs.forEach(ref => ref.update(value, old));
    }
    // life //
    term() {
        this.refs.forEach(ref => ref.release());
        delete this.rel;
    }
}
class RefImpl {
    source;
    _update;
    constructor(source, _update) {
        this.source = source;
        this._update = _update;
        this.source && this._update?.(this.source.value);
    }
    update(value, old) {
        this._update?.(value, old);
    }
    release() {
        if (this.source == null)
            return;
        this.source.removeref(this);
        this.source = null;
        this._update = null;
    }
}
export class ToStr {
}
class ToStrImpl extends ToStr {
    source;
    toref;
    constructor(source, toref) {
        super();
        this.source = source;
        this.toref = toref;
    }
    ref(update) { return this.source.ref(update); }
    get value() { return this.toref(this.source.value); }
}
class Conv extends Leaf {
    srcRef;
    constructor(source, conv) {
        super(conv.toref(source.value));
        const update = () => {
            this.value = conv.toref(source.value);
        };
        this.srcRef = source.ref(update);
    }
    term() {
        this.srcRef.release();
        super.term();
    }
}
//
(function (Leaf) {
    class String extends Leaf {
    }
    Leaf.String = String;
    ;
    class Number extends Leaf {
    }
    Leaf.Number = Number;
    ;
    class Boolean extends Leaf {
    }
    Leaf.Boolean = Boolean;
    ;
})(Leaf || (Leaf = {}));
export function leaf(initv, args) {
    return initv instanceof Leaf ? initv : new Leaf(initv, args);
}
(function (leaf) {
    leaf.str = (leaf);
    leaf.num = (leaf);
    leaf.bool = (leaf);
    leaf.string = (leaf);
    leaf.number = (leaf);
    leaf.boolean = (leaf);
    leaf.Str = (leaf);
    leaf.Num = (leaf);
    leaf.Bool = (leaf);
    leaf.String = (leaf);
    leaf.Number = (leaf);
    leaf.Boolean = (leaf);
})(leaf || (leaf = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGVhZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBSXhCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFFLEtBQWMsRUFBcUIsRUFBRSxDQUFDLENBQUUsT0FBTyxLQUFLLElBQUksUUFBUSxDQUFFLENBQUM7QUFDeEYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUUsS0FBYyxFQUFxQixFQUFFLENBQUMsQ0FBRSxPQUFPLEtBQUssSUFBSSxRQUFRLENBQUUsQ0FBQztBQUN4RixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBRSxLQUFjLEVBQXNCLEVBQUUsQ0FBQyxDQUFFLE9BQU8sS0FBSyxJQUFJLFNBQVMsQ0FBRSxDQUFDO0FBVzFGLE1BQU0sT0FBTyxJQUFJO0lBRU4sTUFBTSxDQUFLO0lBQ1gsR0FBRyxDQUFpQjtJQUNwQixJQUFJLEdBQUcsSUFBSSxHQUFxQixDQUFFO0lBRTVDLFlBQWEsS0FBUyxFQUFFLElBQXVCO1FBRTlDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUztJQUVULEtBQUssQ0FBRSxLQUErQjtRQUVyQyxPQUFPLElBQUksU0FBUyxDQUFTLElBQUksRUFBRSxLQUFLLENBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRUQsR0FBRyxDQUFFLE1BQXFCO1FBRXpCLE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFTLElBQUksRUFBRSxNQUFNLENBQUUsQ0FBQztRQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFRCxT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