const log = console.log;
export const iss = (value) => (typeof value == "string");
export const isn = (value) => (typeof value == "number");
export const isb = (value) => (typeof value == "boolean");
export class Leaf {
    _value;
    rel;
    refs = new Set;
    constructor(value, args) {
        this._value = value;
        this.rel = args?.rel;
    }
    // conv
    str(conv) {
        conv = conv || { toref: (value) => String(value) };
        return new Conv(this, conv);
    }
    // ref
    convref(convfn) {
        ;
    }
    ref(update) {
        const ref = new RefI(this, update);
        this.refs.add(ref);
        return ref;
    }
    removeref(ref) {
        this.refs.delete(ref);
    }
    //
    get value() { return this._value; }
    set value(value) { this.set(value); }
    get() { return this._value; }
    set(value, sender) {
        if (value === this._value)
            return;
        const old = this._value;
        this._value = value;
        this.rel?.();
        this.refs.forEach(ref => ref.update(value, old));
    }
    term() {
        this.refs.forEach(ref => ref.release());
        delete this.rel;
    }
}
class RefI {
    source;
    _update;
    constructor(source, _update) {
        this.source = source;
        this._update = _update;
        this.source && this._update?.(this.source.value);
    }
    update(value, old) {
        this._update?.(value, old);
    }
    release() {
        if (this.source == null)
            return;
        this.source.removeref(this);
        this.source = null;
        this._update = null;
    }
}
class Conv extends Leaf {
    srcRef;
    constructor(source, conv) {
        super(conv.toref(source.value));
        const update = () => {
            this.value = conv.toref(source.value);
        };
        this.srcRef = source.ref(update);
    }
    term() {
        this.srcRef.release();
        super.term();
    }
}
//
(function (Leaf) {
    class String extends Leaf {
    }
    Leaf.String = String;
    ;
    class Number extends Leaf {
    }
    Leaf.Number = Number;
    ;
    class Boolean extends Leaf {
    }
    Leaf.Boolean = Boolean;
    ;
})(Leaf || (Leaf = {}));
export function leaf(initv, args) {
    return initv instanceof Leaf ? initv : new Leaf(initv, args);
}
(function (leaf) {
    leaf.str = (leaf);
    leaf.num = (leaf);
    leaf.bool = (leaf);
    leaf.string = (leaf);
    leaf.number = (leaf);
    leaf.boolean = (leaf);
    leaf.Str = (leaf);
    leaf.Num = (leaf);
    leaf.Bool = (leaf);
    leaf.String = (leaf);
    leaf.Number = (leaf);
    leaf.Boolean = (leaf);
})(leaf || (leaf = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGVhZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBSXhCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFFLEtBQWMsRUFBcUIsRUFBRSxDQUFDLENBQUUsT0FBTyxLQUFLLElBQUksUUFBUSxDQUFFLENBQUM7QUFDeEYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUUsS0FBYyxFQUFxQixFQUFFLENBQUMsQ0FBRSxPQUFPLEtBQUssSUFBSSxRQUFRLENBQUUsQ0FBQztBQUN4RixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBRSxLQUFjLEVBQXNCLEVBQUUsQ0FBQyxDQUFFLE9BQU8sS0FBSyxJQUFJLFNBQVMsQ0FBRSxDQUFDO0FBVzFGLE1BQU0sT0FBTyxJQUFJO0lBRU4sTUFBTSxDQUFLO0lBQ1gsR0FBRyxDQUFpQjtJQUNwQixJQUFJLEdBQUcsSUFBSSxHQUFrQixDQUFFO0lBRXpDLFlBQWEsS0FBUyxFQUFFLElBQXVCO1FBRTlDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUN0QixDQUFDO0lBRUQsT0FBTztJQUVQLEdBQUcsQ0FBRSxJQUE2QjtRQUVqQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUUsS0FBSyxFQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUUsS0FBSyxDQUFFLEVBQUUsQ0FBQztRQUN2RCxPQUFPLElBQUksSUFBSSxDQUFpQixJQUFJLEVBQUUsSUFBSSxDQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVELE1BQU07SUFFTixPQUFPLENBQUUsTUFBZ0M7UUFFeEMsQ0FBQztJQUNGLENBQUM7SUFFRCxHQUFHLENBQUUsTUFBcUI7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