import { Leaf } from "../model/leaf.js";
const log = console.log;
export var defs;
(function (defs) {
    defs.isElement = Symbol();
    const d = {};
    d.background = "";
    d.fontFamily = "";
    d.fontFamily = new Leaf("");
    //  //
    defs.createElement = (type, first, ...rest) => {
        if (typeof first == "object") {
            if (!(defs.isElement in first || first instanceof Leaf)) {
                return { type, props: first, parts: rest, [defs.isElement]: true };
            }
        }
        return { type, parts: first ? [first, ...rest] : undefined, [defs.isElement]: true };
    };
})(defs || (defs = {}));
//
export class Component {
    e = null;
    partsList = new Set;
    refs = new Set();
    constructor(def, ce) {
        this.e = this.createElement(def, ce);
    }
    createElement(def, ce) {
        const { type, props, parts } = def;
        const e = document.createElement(type);
        if (parts)
            this.createParts(e, parts);
        if (props)
            this.bindProps(props, e);
        if (ce)
            ce.appendChild(e);
        return e;
    }
    bindProps(def, e) {
        for (const [name, value] of Object.entries(def)) {
            if (name == "attrs")
                this.bindAttrs(value, e);
            else if (name == "class")
                this.bindClass(value, e);
            else if (name == "styles" && e instanceof HTMLElement)
                this.bindStyle(value, e);
            else
                bind(e, name, value, this.refs);
        }
    }
    bindClass(def, e) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(subdef, e);
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bind(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindAttrs(def, e) {
        for (const [name, value] of Object.entries(def)) {
            log("attr", name, value);
            bind(e, name, value, this.refs);
        }
    }
    bindStyle(def, e) {
        for (const [name, value] of Object.entries(def)) {
            bind(e.style, name, value, this.refs);
        }
    }
    createParts(e, def) {
        this.partsList.add(new Parts(this, e, def));
    }
    createPart(def, ce) {
        if (def == null)
            return;
        if (typeof def == "object" && defs.isElement in def) {
            return this.createElement(def, ce);
        }
        const n = document.createTextNode("");
        bind(n, "nodeValue", def, this.refs);
        ce.appendChild(n);
    }
    terminate() {
        this.partsList.forEach(i => i.terminate());
        this.partsList.clear();
        this.e = null;
    }
}
class Parts {
    compo;
    e;
    constructor(compo, e, def) {
        this.compo = compo;
        this.e = e;
        for (const partdef of def)
            compo.createPart(partdef, e);
    }
    terminate() {
        ;
    }
}
const bind = (target, name, value, refs) => {
    if (value instanceof Leaf) {
        const update = (value) => {
            target[name] = value;
        };
        const ref = value.ref(update);
        refs.add(ref);
    }
    else
        target[name] = value;
};
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref((value) => e.classList.toggle(name, value)));
    }
    else {
        e.classList.toggle(name, value);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9jb21wby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQXlCLElBQUksRUFBWSxNQUFNLGtCQUFrQixDQUFDO0FBRXpFLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFNeEIsTUFBTSxLQUFXLElBQUksQ0F3RHBCO0FBeERELFdBQWlCLElBQUk7SUFZUCxjQUFTLEdBQUcsTUFBTSxFQUFFLENBQUM7SUFtQmxDLE1BQU0sQ0FBQyxHQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUNsQixDQUFDLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztJQUNsQixDQUFDLENBQUMsVUFBVSxHQUFHLElBQUksSUFBSSxDQUFjLEVBQUUsQ0FBRSxDQUFDO0lBUTFDLE1BQU07SUFFTyxrQkFBYSxHQUFHLENBQUUsSUFBYSxFQUFFLEtBQXNCLEVBQUUsR0FBSSxJQUFjLEVBQWEsRUFBRTtRQUV0RyxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFDNUI7WUFDQyxJQUFJLENBQUUsQ0FBRSxLQUFBLFNBQVMsSUFBSSxLQUFLLElBQUksS0FBSyxZQUFZLElBQUksQ0FBRSxFQUNyRDtnQkFDQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFFLEtBQUEsU0FBUyxDQUFFLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDaEU7U0FDRDtRQUVELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUUsS0FBQSxTQUFTLENBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNyRixDQUFDLENBQUE7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