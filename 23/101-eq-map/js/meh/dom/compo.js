import { Leaf, ToStr } from "../model/leaf.js";
const log = console.log;
export var defs;
(function (defs) {
    //  //
    defs.createElement = (type, first, ...rest) => {
        if (typeof first == "object") {
            if (!("isElement" in first || first instanceof Leaf || first instanceof ToStr)) {
                return {
                    isElement: true,
                    type,
                    props: first,
                    parts: rest
                };
            }
        }
        return {
            isElement: true,
            type,
            parts: first ? [first, ...rest] : undefined
        };
    };
})(defs || (defs = {}));
//
export class Component {
    e = null;
    partsList = new Set;
    refs = new Set();
    constructor(def, ce) {
        this.e = this.createElement(def, ce);
    }
    createElement(def, ce) {
        const { type, props, parts } = def;
        const e = document.createElement(type);
        if (parts)
            this.createParts(e, parts);
        if (props)
            this.bindProps(props, e);
        if (ce)
            ce.appendChild(e);
        return e;
    }
    bindProps(def, e) {
        for (const [name, value] of Object.entries(def)) {
            if (name == "attrs")
                this.bindAttrs(value, e);
            else if (name == "class")
                this.bindClass(value, e);
            else if (name == "style" && e instanceof HTMLElement)
                this.bindStyle(value, e);
            else
                bindText(e, name, value, this.refs);
        }
    }
    bindClass(def, e) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(subdef, e);
            return;
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bindText(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindAttrs(def, e) {
        for (const [name, value] of Object.entries(def)) {
            log("attr", name, value);
            bindText(e, name, value, this.refs);
        }
    }
    bindStyle(def, e) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e.style, name, value, this.refs);
        }
    }
    createParts(e, def) {
        this.partsList.add(new Parts(this, e, def));
    }
    createPart(def, ce) {
        if (def == null)
            return;
        if (typeof def == "object" && "isElement" in def) {
            return this.createElement(def, ce);
        }
        const n = document.createTextNode("");
        bindText(n, "nodeValue", def, this.refs);
        ce.appendChild(n);
    }
    terminate() {
        this.partsList.forEach(i => i.terminate());
        this.partsList.clear();
        this.e = null;
    }
}
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref((value) => e.classList.toggle(name, value)));
    }
    else
        e.classList.toggle(name, value);
};
const bindProp = (target, name, value, refs) => {
    if (value instanceof Leaf || value instanceof ToStr) {
        refs.add(value.ref(() => { target[name] = value.value; }));
    }
    else
        target[name] = value;
};
const bindAttr = (target, name, text, refs) => {
    if (text instanceof Leaf || text instanceof ToStr) {
        refs.add(text.ref(() => { target[name] = text.value; }));
    }
    else
        target[name] = text;
};
const bindText = (target, name, text, refs) => {
    if (text instanceof Leaf || text instanceof ToStr) {
        refs.add(text.ref(() => { target[name] = text.value; }));
    }
    else
        target[name] = text;
};
//  //
class Parts {
    compo;
    e;
    constructor(compo, e, def) {
        this.compo = compo;
        this.e = e;
        for (const partdef of def)
            compo.createPart(partdef, e);
    }
    terminate() {
        ;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9jb21wby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsSUFBSSxFQUFZLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpFLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFNeEIsTUFBTSxLQUFXLElBQUksQ0E2RXBCO0FBN0VELFdBQWlCLElBQUk7SUFzRHBCLE1BQU07SUFFTyxrQkFBYSxHQUFHLENBQUUsSUFBYSxFQUFFLEtBQXNCLEVBQUUsR0FBSSxJQUFjLEVBQWEsRUFBRTtRQUV0RyxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFDNUI7WUFDQyxJQUFJLENBQUUsQ0FBRSxXQUFXLElBQUksS0FBSyxJQUFJLEtBQUssWUFBWSxJQUFJLElBQUksS0FBSyxZQUFZLEtBQUssQ0FBRSxFQUNqRjtnQkFDQyxPQUFPO29CQUNOLFNBQVMsRUFBRSxJQUFJO29CQUNmLElBQUk7b0JBQ0osS0FBSyxFQUFFLEtBQUs7b0JBQ1osS0FBSyxFQUFFLElBQUk7aUJBQ1gsQ0FBQzthQUNGO1NBQ0Q7UUFFRCxPQUFPO1lBQ04sU0FBUyxFQUFFLElBQUk7WUFDZixJQUFJO1lBQ0osS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUztTQUM3QyxDQUFDO0lBQ0gsQ0FBQyxDQUFBO0FBQ0YsQ0FBQyxFQTdFZ0IsSUFBSSxLQUFKLElBQUksUUE2RXBCO0FBRUQsRUFBRTtBQUVGLE1BQU0sT0FBTyxTQUFTO0lBRXJCLENBQUMsR0FBb0IsSUFBSSxDQUFDO0lBQzFCLFNBQVMsR0FBRyxJQUFJLEdBQWEsQ0FBQztJQUM5QixJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQVcsQ0FBQztJQUUxQixZQUFhLEdBQWtCLEVBQUUsRUFBbUI7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