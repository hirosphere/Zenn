const log = console.log;
/** class Exist
 * Mehクラスの存在の元締め。　メモリリーク防止に有効と思え。
*/
const parts = Symbol();
class OwnerImpl {
    runiq = nextru++;
    toString() { return "Owner ru " + String(this.runiq); }
    [parts] = new Set;
    terminate() {
        this[parts].forEach(part => part.terminate());
        this[parts].clear();
    }
}
let nextru = 0;
export const root = new OwnerImpl();
export class Exist extends OwnerImpl {
    constructor(owner) {
        super();
        this.owner = owner;
        owner[parts].add(this);
        log(this.lf("construct"));
    }
    /** owner */
    owner;
    /** refs */
    refs = new Set;
    addRef(ref) {
        this.refs.add(ref);
    }
    removeRef(ref) {
        this.refs.delete(ref);
    }
    /** life */
    terminate() {
        super.terminate();
        this.refs.forEach(ref => ref.release());
        this.refs.clear();
        delete this.owner;
        log(this.lf("terminate"));
    }
    get ru() { return this.runiq; }
    /**  */
    lf(event, info = "") { return `Exist[${this.ru}] ${event}`; }
}
(function (Exist) {
    /**  class Ref
     * モデルとビュー(SourceとRef)を分かつ根源。
     * 。
    */
    class Ref {
        /** */
        constructor() {
            log(this.lf("construct"));
        }
        static nextid = 1;
        id = Ref.nextid++;
        /** source アクセサ */
        set source(newSource) { this.setSource(newSource); }
        get source() { return this._source; }
        setSource(newSource) {
            if (newSource == this._source)
                return;
            //log( "Exist.Ref setSource", "ru " + newSource?.ru )
            this._source?.removeRef(this);
            this._source = newSource;
            this._source?.addRef(this);
            this.onSourceChange();
        }
        _source;
        /** source イベントハンドラ */
        onSourceChange() {
            log(this.lf("onSourceChange"));
        }
        /** 操作 */
        release() {
            log(this.lf("release"));
            this._source?.removeRef(this);
        }
        /**  */
        lf(event) { return `Exist.Ref[${this.id}-${this.source?.ru ?? "?"}] ${event}`; }
    }
    Exist.Ref = Ref;
})(Exist || (Exist = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL21vZGVsL2V4aXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFeEI7O0VBRUU7QUFFRixNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQztBQVN2QixNQUFNLFNBQVM7SUFFTCxLQUFLLEdBQUcsTUFBTSxFQUFHLENBQUM7SUFDcEIsUUFBUSxLQUFjLE9BQU8sV0FBVyxHQUFHLE1BQU0sQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXpFLENBQUUsS0FBSyxDQUFFLEdBQUcsSUFBSSxHQUFhLENBQUU7SUFFeEIsU0FBUztRQUVmLElBQUksQ0FBRSxLQUFLLENBQUUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUUsS0FBSyxDQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDdkIsQ0FBQztDQUNEO0FBRUQsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRWYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7QUFFcEMsTUFBTSxPQUFPLEtBQU0sU0FBUSxTQUFTO0lBRW5DLFlBQWEsS0FBYTtRQUV6QixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBRSxLQUFLLENBQUUsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLENBQUM7UUFFM0IsR0FBRyxDQUFFLElBQUksQ0FBQyxFQUFFLENBQUUsV0FBVyxDQUFFLENBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsWUFBWTtJQUVGLEtBQUssQ0FBVztJQUUxQixXQUFXO0lBRUQsSUFBSSxHQUFHLElBQUksR0FBaUIs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