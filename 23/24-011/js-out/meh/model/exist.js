const log = console.log;
import { _ls } from "../ls.js";
const ls = _ls.model.exist;
/** class ExistContainer */
const _parts = Symbol();
export class Con {
    /** parts */
    [_parts] = new Set;
    terminate() {
        this[_parts].forEach(part => part.terminate());
    }
}
/** class Exist */
export const _container = Symbol();
export const _addref = Symbol();
export const _removeref = Symbol();
export const _refs = Symbol();
let nextru = { exist: 1, ref: 1 };
export class Exist extends Con {
    constructor(container) {
        super();
        this[_container] = container;
        this[_container][_parts].add(this);
        ls.life.s && log(this.logform("new"));
    }
    runiq = "E" + String(nextru.exist++);
    [_container] = null;
    [_refs] = new Set;
    /** refs */
    [_addref](ref) {
        // log( this.logform( "addref", `${ ref.runiq }` ) );
        this[_refs].add(ref);
    }
    [_removeref](ref) {
        this[_refs].delete(ref);
        ls.ref.s && log(this.logform("removeref", `${ref.runiq}`));
    }
    /** life */
    terminate() {
        this[_refs].forEach(ref => ref.ref_term());
        this[_container]?.[_parts].delete(this);
        this[_container] = null;
        super.terminate();
        ls.life.s && log(this.logform("old"));
    }
    /** log */
    logform(event, msg = "") { return `Exist ${this.runiq} ${event} ${msg}`; }
}
(function (Exist) {
    const _new_source = Symbol();
    class Ref {
        acts;
        refcon;
        _source;
        constructor(refcon, acts, source) {
            this.acts = acts;
            ls.life.s && log(this.logform("new"));
            (this.refcon = refcon).add(this);
            this.source = source;
        }
        runiq = "R" + String(nextru.ref++);
        set source(news) {
            if (news === this._source)
                return;
            let olds = this._source;
            olds?.[_removeref](this);
            this._source = news;
            news?.[_addref](this);
            ls.src.s && log(this.runiq, "set source", news?.runiq ?? "..", olds?.runiq ?? "..");
            this._new_source(news, olds);
            news = olds = undefined;
        }
        /** event */
        _new_source(news, olds) {
            // log( this.logform( "new_src", `${ news?.runiq || "x" } ${ olds?.runiq || "x" }` ) );
            olds && this.acts?.old_source?.();
            news && this.acts?.new_source?.(news);
        }
        /** life.s */
        ref_term() {
            this.source = undefined;
            this.refcon?.remove(this);
            this.refcon = undefined;
            ls.life.s && log(this.logform("old"));
        }
        /** log form */
        logform(event, msg = "") { return `${this.runiq} ${event} ${msg}`; }
    }
    Exist.Ref = Ref;
})(Exist || (Exist = {}));
(function (Exist) {
    var Ref;
    (function (Ref) {
        class Container {
            items = new Set;
            add(ref) { this.items.add(ref); }
            remove(ref) { this.items.delete(ref); }
            forEach(fn) {
                this.items.forEach(ref => fn(ref));
            }
            refs_term() {
                this.items.forEach(ref => ref.ref_term());
            }
            get size() { return this.items.size; }
        }
        Ref.Container = Container;
    })(Ref = Exist.Ref || (Exist.Ref = {}));
})(Exist || (Exist = {}));
/**  */
export const root = new Con();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL21vZGVsL2V4aXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFeEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMvQixNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztBQUUzQiwyQkFBMkI7QUFFM0IsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFeEIsTUFBTSxPQUFPLEdBQUc7SUFFZixZQUFZO0lBRUksQ0FBRSxNQUFNLENBQUUsR0FBRyxJQUFJLEdBQWEsQ0FBRTtJQUV6QyxTQUFTO1FBRWYsSUFBSSxDQUFFLE1BQU0sQ0FBRSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBRSxDQUFDO0lBQ3BELENBQUM7Q0FDRDtBQUdELGtCQUFrQjtBQUVsQixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNuQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFOUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUVsQyxNQUFNLE9BQU8sS0FBTSxTQUFRLEdBQUc7SUFFN0IsWUFBYSxTQUFlO1FBRTNCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFFLFVBQVUsQ0FBRSxHQUFHLFNBQVMsQ0FBQztRQUMvQixJQUFJLENBQUUsVUFBVSxDQUFFLENBQUUsTUFBTSxDQUFFLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFDO1FBRXpDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVlLEtBQUssR0FBWSxHQUFHLEdBQUcsTUFBTSxDQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUcsQ0FBRSxDQUFFO0lBQ3hELENBQUUsVUFBVSxDQUFFLEdBQWdCLElBQUksQ0FBRTtJQUNwQyxDQUFFLEtBQUssQ0FBRSxHQUFHLElBQUksR0FBaUIsQ0FBQztJQUU1QyxXQUFXO0lBRUosQ0FBRSxPQUFPLENBQUUsQ0FBRSxHQUFlO1FBRWxDLHFEQUFxRDtRQUNyRCxJQUFJLENBQUUsS0FBSyxDQUFFLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFDO0lBQzFCLENBQUM7SUFFTSxDQUFFLFVBQVUsQ0FBRSxDQUFFLEdBQWU7UUFFckMsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDLE1BQU0sQ0FBRSxHQUFHLENBQUUsQ0FBQztRQUM1QixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxXQUFXLEVBQUUsR0FBSSxHQUFHLENBQUMsS0FBTSxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBQ2xFLENBQUM7SUFFRCxXQUFXO0lBRUssU0FBUztRQUV4QixJQUFJLENBQUUsS0FBSyxDQUFFLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFFLFVBQVUsQ0FBRSxFQUFFLENBQUUsTUFBTSxDQUFFLENBQUMsTUFBTSxDQUFFLElBQUksQ0FBRSxDQUFDO1FBQzlDLElBQUksQ0FBRSxVQUFVLENBQUUsR0FBRyxJQUFJLENBQUM7UUFFMUIsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRWxCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7SUFDM0MsQ0FBQztJQUVELFVBQVU7SUFFQSxPQUFPLENBQUUsS0FBYyxFQUFFLE1BQWdCLEVBQUUsSUFBSyxPQUFPLFNBQVUsSUFBSSxDQUFDLEtBQU0sSUFBSyxLQUFNLElBQUssR0FBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQy9HO0FBT0QsV0FBaUIsS0FBSztJQUVyQixNQUFNLFdBQVcsR0FBRyxNQUFNLEVBQUUsQ0FBQztJQUU3QixNQUFhLEdBQUc7UUFRSjtRQU5ELE1BQU0sQ0FBb0I7UUFDMUIsT0FBTyxDQUFXO1FBRTVCLFlBRUMsTUFBc0IsRUFDWixJQUFXLEVBQ3JCLE1BQWdCO1lBRE4sU0FBSSxHQUFKLElBQUksQ0FBTztZQUlyQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1lBQzFDLENBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUUsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLENBQUM7WUFDckMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDdEIsQ0FBQztRQUVlLEtBQUssR0FBWSxHQUFHLEdBQUcsTUFBTSxDQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUcsQ0FBRSxDQUFFO1FBRWhFLElBQVcsTUFBTSxDQUFFLElBQXdCO1lBRTFDLElBQUksSUFBSSxLQUFLLElBQUksQ0FBQyxPQUFPO2dCQUFJLE9BQU87WUFFcEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN4QixJQUFJLEVBQUUsQ0FBRSxVQUFVLENBQUUsQ0FBRSxJQUFJLENBQUUsQ0FBQztZQUU3QixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLEVBQUUsQ0FBRSxPQUFPLENBQUUsQ0FBRSxJQUFJLENBQUUsQ0FBQztZQUUxQixFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEtBQUssSUFBSSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssSUFBSSxJQUFJLENBQUUsQ0FBQztZQUV0RixJQUFJLENBQUMsV0FBVyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQztZQUMvQixJQUFJLEdBQUcsSUFBSSxHQUFHLFNBQVMsQ0FBQztRQUN6QixDQUFDO1FBRUQsWUFBWTtRQUVMLFdBQVcsQ0FBRSxJQUFjLEVBQUUsSUFBYztZQUVqRCx1RkFBdUY7WUFFdkYsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FBQztZQUNsQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBRSxJQUFJLENBQUUsQ0FBQztRQUN6QyxDQUFDO1FBRUQsYUFBYTtRQUVOLFFBQVE7WUFFZCxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUN4QixJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBRSxJQUFJLENBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUV4QixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO1FBQzNDLENBQUM7UUFFRCxlQUFlO1FBRUwsT0FBTyxDQUFFLEtBQWEsRUFBRSxNQUFlLEVBQUUsSUFBYyxPQUFPLEdBQUksSUFBSSxDQUFDLEtBQU0sSUFBSyxLQUFNLElBQUssR0FBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2hIO0lBM0RZLFNBQUcsTUEyRGYsQ0FBQTtBQU9GLENBQUMsRUF0RWdCLEtBQUssS0FBTCxLQUFLLFFBc0VyQjtBQUVELFdBQWlCLEtBQUs7SUFBQyxJQUFBLEdBQUcsQ0FxQnpCO0lBckJzQixXQUFBLEdBQUc7UUFFekIsTUFBYSxTQUFTO1lBRVgsS0FBSyxHQUFHLElBQUksR0FBVyxDQUFFO1lBRTVCLEdBQUcsQ0FBRSxHQUFTLElBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBRSxHQUFTLElBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQyxDQUFDO1lBRXhELE9BQU8sQ0FBRSxFQUEwQjtnQkFFekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUUsR0FBRyxDQUFFLENBQUUsQ0FBQztZQUN4QyxDQUFDO1lBRU0sU0FBUztnQkFFZixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBRSxDQUFDO1lBQzdDLENBQUM7WUFFRCxJQUFXLElBQUksS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUM3QztRQWxCWSxhQUFTLFlBa0JyQixDQUFBO0lBQ0YsQ0FBQyxFQXJCc0IsR0FBRyxHQUFILFNBQUcsS0FBSCxTQUFHLFFBcUJ6QjtBQUFELENBQUMsRUFyQmdCLEtBQUssS0FBTCxLQUFLLFFBcUJyQjtBQUdELE9BQU87QUFFUCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQyJ9