const dbg = true;
const log = dbg ? console.log : (...args) => void (0);
/** class Container */
const _parts = Symbol();
export class Container {
    /** parts */
    [_parts] = new Set;
    _update() { }
    terminate() {
        this[_parts].forEach(part => part.terminate());
    }
}
/** class Exist */
export const _container = Symbol();
let nextru = 1;
export class Exist extends Container {
    constructor(container) {
        super();
        this[_container] = container;
        this[_container][_parts].add(this);
        log(this.logform("new"));
    }
    [_container] = null;
    runiq = String(nextru++);
    /** refs */
    addRef(ref) {
        log(this.logform("addref", `${ref.runiq}`));
        this._refs.add(ref);
    }
    removeRef(ref) {
        this._refs.delete(ref);
        log(this.logform("removeref", `${ref.runiq}`));
    }
    _refs = new Exist.Refs();
    /** life */
    terminate() {
        this._refs.forEach(ref => ref.source = null);
        this[_container]?.[_parts].delete(this);
        this[_container] = null;
        super.terminate();
        log(this.logform("term"));
    }
    /** log */
    logform(event, msg = "") { return `Exist ${this.runiq} ${event} ${msg}`; }
}
/** namespace Exist */
(function (Exist) {
    class Ref {
        _source = null;
        constructor(refs) {
            log(this.logform("new"));
            refs.add(this);
        }
        runiq = String(nextru++);
        set source(news) {
            if (news == this._source)
                return;
            let olds = this._source;
            olds?.removeRef(this);
            this._source = news;
            news?.addRef(this);
            this._new_source(news, olds);
            news = olds = null;
        }
        /** event */
        _new_source(news, olds) {
            log(this.logform("new_src", `${news?.runiq || "x"} ${olds?.runiq || "x"}`));
        }
        /** life */
        terminate() {
            this.source = null;
            log(this.logform("term"));
        }
        /** log form */
        logform(event, msg = "") { return `Ref ${this.runiq} ${event} ${msg}`; }
    }
    Exist.Ref = Ref;
    class Refs extends Set {
        terminate() {
            this.forEach(ref => { ref.source = null; });
        }
    }
    Exist.Refs = Refs;
})(Exist || (Exist = {}));
/**  */
export const root = new Container();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL21vZGVsL2V4aXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUUsR0FBSSxJQUFZLEVBQUcsRUFBRSxDQUFDLEtBQUksQ0FBRSxDQUFDLENBQUUsQ0FBQztBQUVsRSxzQkFBc0I7QUFFdEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFeEIsTUFBTSxPQUFPLFNBQVM7SUFFckIsWUFBWTtJQUVMLENBQUUsTUFBTSxDQUFFLEdBQUcsSUFBSSxHQUFhLENBQUU7SUFDaEMsT0FBTyxLQUFJLENBQUM7SUFFWixTQUFTO1FBRWYsSUFBSSxDQUFFLE1BQU0sQ0FBRSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBRSxDQUFDO0lBQ3BELENBQUM7Q0FDRDtBQUdELGtCQUFrQjtBQUVsQixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFbkMsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBRWYsTUFBTSxPQUFPLEtBQU0sU0FBUSxTQUFTO0lBRW5DLFlBQWEsU0FBcUI7UUFFakMsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUUsVUFBVSxDQUFFLEdBQUcsU0FBUyxDQUFDO1FBQy9CLElBQUksQ0FBRSxVQUFVLENBQUUsQ0FBRSxNQUFNLENBQUUsQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLENBQUM7UUFFekMsR0FBRyxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztJQUM5QixDQUFDO0lBRVMsQ0FBRSxVQUFVLENBQUUsR0FBc0IsSUFBSSxD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