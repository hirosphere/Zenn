const dbg = true;
const log = dbg ? console.log : (...args) => void (0);
import { _ls } from "../ls.js";
const ls = _ls.model.exist;
/** class Owner */
const _parts = Symbol();
export class ExistContainer {
    /** parts */
    [_parts] = new Set;
    terminate() {
        this[_parts].forEach(part => part.terminate());
    }
}
/** class Exist */
export const _owner = Symbol();
export const _addref = Symbol();
export const _removeref = Symbol();
export const _refs = Symbol();
let nextru = { exist: 1, ref: 1 };
export class Exist extends ExistContainer {
    constructor(owner) {
        super();
        this[_owner] = owner;
        this[_owner][_parts].add(this);
        ls.life.s && log(this.logform("new"));
    }
    runiq = "E" + String(nextru.exist++);
    [_owner] = null;
    [_refs] = new Set;
    /** refs */
    [_addref](ref) {
        // log( this.logform( "addref", `${ ref.runiq }` ) );
        this[_refs].add(ref);
    }
    [_removeref](ref) {
        this[_refs].delete(ref);
        ls.ref.s && log(this.logform("removeref", `${ref.runiq}`));
    }
    /** life */
    terminate() {
        this[_refs].forEach(ref => ref.ref_term());
        this[_owner]?.[_parts].delete(this);
        this[_owner] = null;
        super.terminate();
        ls.life.s && log(this.logform("old"));
    }
    /** log */
    logform(event, msg = "") { return `Exist ${this.runiq} ${event} ${msg}`; }
}
/** namespace Exist */
(function (Exist) {
    const _new_source = Symbol();
    class Ref {
        acts;
        refcon;
        _source;
        constructor(refcon, acts, source) {
            this.acts = acts;
            ls.life.s && log(this.logform("new"));
            (this.refcon = refcon).add(this);
            this.source = source;
        }
        runiq = "R" + String(nextru.ref++);
        set source(news) {
            if (news === this._source)
                return;
            let olds = this._source;
            olds?.[_removeref](this);
            this._source = news;
            news?.[_addref](this);
            ls.src.s && log(this.runiq, "set source", news?.runiq ?? "..", olds?.runiq ?? "..");
            this._new_source(news, olds);
            news = olds = undefined;
        }
        /** event */
        _new_source(news, olds) {
            // log( this.logform( "new_src", `${ news?.runiq || "x" } ${ olds?.runiq || "x" }` ) );
            olds && this.acts?.old_source?.();
            news && this.acts?.new_source?.(news);
        }
        /** life.s */
        ref_term() {
            this.source = undefined;
            this.refcon?.remove(this);
            this.refcon = undefined;
            ls.life.s && log(this.logform("old"));
        }
        /** log form */
        logform(event, msg = "") { return `${this.runiq} ${event} ${msg}`; }
    }
    Exist.Ref = Ref;
})(Exist || (Exist = {}));
(function (Exist) {
    class RefContainer {
        items = new Set;
        add(ref) { this.items.add(ref); }
        remove(ref) { this.items.delete(ref); }
        forEach(fn) {
            this.items.forEach(ref => fn(ref));
        }
        refs_term() {
            this.items.forEach(ref => ref.ref_term());
        }
        get size() { return this.items.size; }
    }
    Exist.RefContainer = RefContainer;
})(Exist || (Exist = {}));
/**  */
export const root = new ExistContainer();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL21vZGVsL2V4aXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUUsR0FBSSxJQUFZLEVBQUcsRUFBRSxDQUFDLEtBQUksQ0FBRSxDQUFDLENBQUUsQ0FBQztBQUVsRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9CLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0FBRTNCLGtCQUFrQjtBQUVsQixNQUFNLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUV4QixNQUFNLE9BQU8sY0FBYztJQUUxQixZQUFZO0lBRUksQ0FBRSxNQUFNLENBQUUsR0FBRyxJQUFJLEdBQWEsQ0FBRTtJQUV6QyxTQUFTO1FBRWYsSUFBSSxDQUFFLE1BQU0sQ0FBRSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBRSxDQUFDO0lBQ3BELENBQUM7Q0FDRDtBQUdELGtCQUFrQjtBQUVsQixNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDL0IsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNuQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFOUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUVsQyxNQUFNLE9BQU8sS0FBTSxTQUFRLGNBQWM7SUFFeEMsWUFBYSxLQUFzQjtRQUVsQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBRSxNQUFNLENBQUUsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFFLE1BQU0sQ0FBRSxDQUFFLE1BQU0sQ0FBRSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUUsQ0FBQztRQUVyQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO0lBQzNDLENBQUM7SUFFZSxLQUFLLEdBQVksR0FBRyxHQUFHLE1BQU0sQ0FBRSxNQUFNLENBQUMsS0FBSyxFQUFHLENBQUUsQ0FBRTtJQUN4RCxDQUFFLE1BQU0sQ0FBRSxHQUEyQixJQUFJLENBQUU7SUFDM0MsQ0FBRSxLQUFLLENBQUUsR0FBRyxJQUFJLEdBQWlCLENBQUM7SUFFNUMsV0FBVztJQUVKLENBQUUsT0FBTyxDQUFFLENBQUUsR0FBZTtRQUVsQyxxREFBcUQ7UUFDckQsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQztJQUMxQixDQUFDO0lBRU0sQ0FBRSxVQUFVLENBQUUsQ0FBRSxHQUFlO1FBRXJDLElBQUksQ0FBRSxLQUFLLENBQUUsQ0FBQyxNQUFNLENBQUUsR0FBRyxDQUFFLENBQUM7UUFDNUIsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUUsV0FBVyxFQUFFLEdBQUksR0FBRyxDQUFDLEtBQU0sRUFBRSxDQUFFLENBQUUsQ0FBQztJQUNsRSxDQUFDO0lBRUQsV0FBVztJQUVLLFNBQVM7UUFFeEIsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBRSxDQUFDO1FBQy9DLElBQUksQ0FBRSxNQUFNLENBQUUsRUFBRSxDQUFFLE1BQU0sQ0FBRSxDQUFDLE1BQU0sQ0FBRSxJQUFJLENBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUUsTUFBTSxDQUFFLEdBQUcsSUFBSSxDQUFDO1FBRXRCLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVsQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCxVQUFVO0lBRUEsT0FBTyxDQUFFLEtBQWMsRUFBRSxNQUFnQixFQUFFLElBQUssT0FBTyxTQUFVLElBQUksQ0FBQyxLQUFNLElBQUssS0FBTSxJQUFLLEdBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvRztBQU9ELHNCQUFzQjtBQUV0QixXQUFpQixLQUFLO0lBRXJCLE1BQU0sV0FBVyxHQUFHLE1BQU0sRUFBRSxDQUFDO0lBRTdCLE1BQWEsR0FBRztRQVFKO1FBTkQsTUFBTSxDQUFtQjtRQUN6QixPQUFPLENBQVc7UUFFNUIsWUFFQyxNQUFxQixFQUNYLElBQVcsRUFDckIsTUFBZ0I7WUFETixTQUFJLEdBQUosSUFBSSxDQUFPO1lBSXJCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7WUFDMUMsQ0FBRSxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBRSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUN0QixDQUFDO1FBRWUsS0FBSyxHQUFZLEdBQUcsR0FBRyxNQUFNLENBQUUsTUFBTSxDQUFDLEdBQUcsRUFBRyxDQUFFLENBQUU7UUFFaEUsSUFBVyxNQUFNLENBQUUsSUFBd0I7WUFFMUMsSUFBSSxJQUFJLEtBQUssSUFBSSxDQUFDLE9BQU87Z0JBQUksT0FBTztZQUVwQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQ3hCLElBQUksRUFBRSxDQUFFLFVBQVUsQ0FBRSxDQUFFLElBQUksQ0FBRSxDQUFDO1lBRTdCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLElBQUksRUFBRSxDQUFFLE9BQU8sQ0FBRSxDQUFFLElBQUksQ0FBRSxDQUFDO1lBRTFCLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsS0FBSyxJQUFJLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxJQUFJLElBQUksQ0FBRSxDQUFDO1lBRXRGLElBQUksQ0FBQyxXQUFXLENBQUUsSUFBSSxFQUFFLElBQUksQ0FBRSxDQUFDO1lBQy9CLElBQUksR0FBRyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3pCLENBQUM7UUFFRCxZQUFZO1FBRUwsV0FBVyxDQUFFLElBQWMsRUFBRSxJQUFjO1lBRWpELHVGQUF1RjtZQUV2RixJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUFDO1lBQ2xDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFFLElBQUksQ0FBRSxDQUFDO1FBQ3pDLENBQUM7UUFFRCxhQUFhO1FBRU4sUUFBUTtZQUVkLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFFLElBQUksQ0FBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1lBRXhCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7UUFDM0MsQ0FBQztRQUVELGVBQWU7UUFFTCxPQUFPLENBQUUsS0FBYSxFQUFFLE1BQWUsRUFBRSxJQUFjLE9BQU8sR0FBSSxJQUFJLENBQUMsS0FBTSxJQUFLLEtBQU0sSUFBSyxHQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDaEg7SUEzRFksU0FBRyxNQTJEZixDQUFBO0FBT0YsQ0FBQyxFQXRFZ0IsS0FBSyxLQUFMLEtBQUssUUFzRXJCO0FBRUQsV0FBaUIsS0FBSztJQUVyQixNQUFhLFlBQVk7UUFFZCxLQUFLLEdBQUcsSUFBSSxHQUFXLENBQUU7UUFFNUIsR0FBRyxDQUFFLEdBQVMsSUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFFLEdBQVMsSUFBWSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBRSxHQUFHLENBQUUsQ0FBQyxDQUFDLENBQUM7UUFFeEQsT0FBTyxDQUFFLEVBQTBCO1lBRXpDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFFLEdBQUcsQ0FBRSxDQUFFLENBQUM7UUFDeEMsQ0FBQztRQUVNLFNBQVM7WUFFZixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBRSxDQUFDO1FBQzdDLENBQUM7UUFFRCxJQUFXLElBQUksS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUM3QztJQWxCWSxrQkFBWSxlQWtCeEIsQ0FBQTtBQUNGLENBQUMsRUFyQmdCLEtBQUssS0FBTCxLQUFLLFFBcUJyQjtBQUdELE9BQU87QUFFUCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQyJ9