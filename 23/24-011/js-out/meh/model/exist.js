const dbg = true;
const log = dbg ? console.log : (...args) => void (0);
const ltrue = false;
const ls = { life: ltrue, ref: ltrue };
/** class Owner */
const _parts = Symbol();
export class Owner {
    /** parts */
    [_parts] = new Set;
    terminate() {
        this[_parts].forEach(part => part.terminate());
    }
}
/** class Exist */
export const _owner = Symbol();
export const _addref = Symbol();
export const _removeref = Symbol();
export const _refs = Symbol();
let nextru = { exist: 1, ref: 1 };
export class Exist extends Owner {
    constructor(owner) {
        super();
        this[_owner] = owner;
        this[_owner][_parts].add(this);
        ls.life && log(this.logform("new"));
    }
    runiq = "E" + String(nextru.exist++);
    [_owner] = null;
    [_refs] = new Exist.RefCon();
    /** refs */
    [_addref](ref) {
        // log( this.logform( "addref", `${ ref.runiq }` ) );
        this[_refs].add(ref);
    }
    [_removeref](ref) {
        this[_refs].remove(ref);
        ls.ref && log(this.logform("removeref", `${ref.runiq}`));
    }
    /** life */
    terminate() {
        this[_refs].refs_term();
        this[_owner]?.[_parts].delete(this);
        this[_owner] = null;
        super.terminate();
        ls.life && log(this.logform("old"));
    }
    /** log */
    logform(event, msg = "") { return `Exist ${this.runiq} ${event} ${msg}`; }
}
/** namespace Exist */
(function (Exist) {
    const ls = { life: ltrue, src: ltrue };
    const _new_source = Symbol();
    class Ref {
        acts;
        rcon;
        _source;
        constructor(rcon, acts) {
            this.acts = acts;
            ls.life && log(this.logform("new"));
            (this.rcon = rcon).add(this);
        }
        runiq = "R" + String(nextru.ref++);
        set source(news) {
            if (news == this._source)
                return;
            let olds = this._source;
            olds?.[_removeref](this);
            this._source = news;
            news?.[_addref](this);
            ls.src && log(this.runiq, "set source", news?.runiq ?? "..", olds?.runiq ?? "..");
            this._new_source(news, olds);
            news = olds = undefined;
        }
        /** event */
        _new_source(news, olds) {
            // log( this.logform( "new_src", `${ news?.runiq || "x" } ${ olds?.runiq || "x" }` ) );
            olds && this.acts?.old_source?.();
            news && this.acts?.new_source?.(news);
        }
        /** life */
        ref_term() {
            this.source = undefined;
            this.rcon?.remove(this);
            this.rcon = undefined;
            ls.life && log(this.logform("old"));
        }
        /** log form */
        logform(event, msg = "") { return `${this.runiq} ${event} ${msg}`; }
    }
    Exist.Ref = Ref;
})(Exist || (Exist = {}));
(function (Exist) {
    class RefCon {
        items = new Set;
        add(ref) { this.items.add(ref); }
        remove(ref) { this.items.delete(ref); }
        forEach(fn) {
            this.items.forEach(ref => fn(ref));
        }
        refs_term() {
            this.items.forEach(ref => ref.ref_term());
        }
        get size() { return this.items.size; }
    }
    Exist.RefCon = RefCon;
})(Exist || (Exist = {}));
/**  */
export class Container extends Exist {
    update() { }
    ;
}
/**  */
export const root = new Owner();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL21vZGVsL2V4aXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQztBQUNqQixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUUsR0FBSSxJQUFZLEVBQUcsRUFBRSxDQUFDLEtBQUksQ0FBRSxDQUFDLENBQUUsQ0FBQztBQUVsRSxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDcEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUV2QyxrQkFBa0I7QUFFbEIsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFeEIsTUFBTSxPQUFPLEtBQUs7SUFFakIsWUFBWTtJQUVJLENBQUUsTUFBTSxDQUFFLEdBQUcsSUFBSSxHQUFhLENBQUU7SUFFekMsU0FBUztRQUVmLElBQUksQ0FBRSxNQUFNLENBQUUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUUsQ0FBQztJQUNwRCxDQUFDO0NBQ0Q7QUFHRCxrQkFBa0I7QUFFbEIsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUNoQyxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFDbkMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBRTlCLElBQUksTUFBTSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFFbEMsTUFBTSxPQUFPLEtB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