import { defs } from "./defs.js";
import { Nodet } from "./nodet.js";
const log = console.log;
const ltrue = true;
const ls = { rdr: ltrue, base: ltrue, each: ltrue };
/** createParts */
export const createParts = (nodet, ce, def) => {
    return new Reader(nodet, ce, def).next();
};
/** Reader  */
class Reader {
    nodet;
    ce;
    def;
    pos = 0;
    constructor(nodet, ce, def) {
        this.nodet = nodet;
        this.ce = ce;
        this.def = def;
    }
    next() {
        const start_pos = this.pos;
        return this.next_literal() || this.next_each();
    }
    next_literal() {
        const def = [];
        for (; this.pos < this.def.length; this.pos++) {
            if (this.cur instanceof defs.Each)
                break;
            def.push(this.cur);
        }
        ls.rdr && def.length && log(`pf.reader ${this.nodet.runiq} next_literal`);
        return def.length && new LiteralPF(def, this) || undefined;
    }
    next_each() {
        const cur = this.cur;
        if (cur instanceof defs.Each) {
            ls.rdr && log(`pf.reader ${this.nodet.runiq} next_each`);
            this.pos++;
            return new EachPF(cur, this);
        }
        ;
    }
    get cur() { return this.def[this.pos]; }
}
/** class PartFragment */
export class PartFragment {
    reader;
    constructor(reader) {
        this.reader = reader;
    }
    next;
    get firstnode() { return; }
    create_part(def) {
        new Nodet(this.reader.nodet, def, this.reader.ce || null);
    }
    pf_term() {
        this.next?.pf_term();
    }
}
class LiteralPF extends PartFragment {
    def;
    constructor(def, reader) {
        super(reader);
        this.def = def;
        def.forEach(pdef => this.create_part(pdef));
        this.next = reader.next();
    }
}
class EachPF extends PartFragment {
    def;
    constructor(def, reader) {
        super(reader);
        this.def = def;
        ls.each && log("Each PF");
        def.force = (value) => {
            ls.each && log("force", def?.create);
            const pdef = def.create?.(value);
            pdef && this.create_part(pdef);
            log("each");
        };
        this.next = reader.next();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbkMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUN4QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDbkIsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO0FBR3BELGtCQUFrQjtBQUVsQixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQ3hCLENBQ0MsS0FBYSxFQUNiLEVBQVksRUFDWixHQUFrQixFQUVVLEVBQUU7SUFFOUIsT0FBTyxJQUFJLE1BQU0sQ0FBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBRSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVDLENBQUMsQ0FBQztBQUdGLGNBQWM7QUFFZCxNQUFNLE1BQU07SUFNSDtJQUNBO0lBQ0c7SUFORCxHQUFHLEdBQVksQ0FBQyxDQUFBO0lBRTFCLFlBRVEsS0FBYSxFQUNiLEVBQVksRUFDVCxHQUFpQjtRQUZwQixVQUFLLEdBQUwsS0FBSyxDQUFRO1FBQ2IsT0FBRSxHQUFGLEVBQUUsQ0FBVTtRQUNULFFBQUcsR0FBSCxHQUFHLENBQWM7SUFDekIsQ0FBQztJQUVHLElBQUk7UUFFVixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzNCLE9BQU8sSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRVMsWUFBWTtRQUVyQixNQUFNLEdBQUcsR0FBaUIsRUFBRSxDQUFDO1FBRTdCLE9B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