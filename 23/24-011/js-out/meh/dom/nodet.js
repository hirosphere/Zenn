import { Exist } from "../model/exist.js";
import { Leafr } from "../model/leaf.js";
import { defs } from "./defs.js";
import { createParts } from "./parts.js";
const log = console.log;
const ltrue = false;
const ls = { all: ltrue };
/** class Nodet
 *
 * DOMNode, DOMElementのプロパティーと要素をリアクティブにする委譲クラス。
 *
*/
export class Nodet extends Exist {
    node;
    e;
    acts;
    parts;
    refs;
    constructor(container, def, ce, rel) {
        super(container);
        this.node = (def instanceof defs.Element) ?
            this.createElement(def) :
            this.createText(def);
        ce?.insertBefore(this.node, rel || null);
    }
    /** element */
    createElement(def) {
        const e = this.e = document.createElement(def.type);
        let { exist, attrs, props, acts } = def.echar || {};
        if (def.echar?.class) {
            this.class_bind(e, def.echar.class);
        }
        if (attrs) {
            for (let [name, value] of Object.entries(attrs)) {
                this.attr_bind(e, name, value);
            }
        }
        if (props) {
            for (let [name, value] of Object.entries(props)) {
                this.prop_bind(e, name, value);
            }
        }
        if (acts) {
            for (let [name, act] of Object.entries(acts)) {
                this.act_bind(e, name, act);
            }
        }
        if (def.parts)
            this.parts = createParts(this, e, def.parts);
        if (exist) {
            this.refs ??= new Exist.RefCon();
            new Exist.Ref(this.refs, { old_source: () => this.terminate() }).source = exist;
        }
        attrs = undefined;
        return e;
    }
    class_bind(e, def) {
        if (typeof def == "string")
            e.className = def;
    }
    attr_bind(e, name, value) {
        this.bindtext(value, lettr => setAttr(e, name, lettr));
    }
    prop_bind(e, name, value) {
        this.bindtext(value, lettr => e[name] = lettr);
    }
    act_bind(e, name, act) {
        this.acts = this.acts || new Map;
        if (this.acts.has(name))
            this.acts.get(name)?.push(act);
        else
            this.acts.set(name, [act]);
        e.addEventListener(name, act);
    }
    /** text */
    createText(text) {
        const node = document.createTextNode("");
        this.bindtext(text, lettr => { node.nodeValue = lettr; });
        return node;
    }
    /** bindtext */
    bindtext(text, update) {
        if (text instanceof Leafr) {
            this.refs ??= new Exist.RefCon();
            new Leafr.Ref(this.refs, { new_value: newv => update(String(newv)) })
                .source = text;
        }
        else
            update(String(text));
    }
    ;
    /** life */
    terminate() {
        if (this.e && this.acts) {
            for (let [name, acts] of this.acts) {
                ls.all && log(name);
                acts.forEach(act => this.e?.removeEventListener(name, act));
            }
        }
        if (this.e) {
            this.e.remove();
            this.e = undefined;
        }
        this.node = undefined;
        this.parts?.pf_term();
        this.refs?.refs_term();
        super.terminate();
    }
}
const setAttr = (e, name, value) => {
    e.setAttribute(name, String(value));
};
/** */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVMsS0FBSyxFQUFRLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3pDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFnQixXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFDdEQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUN4QixNQUFNLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDcEIsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7QUFJMUI7Ozs7RUFJRTtBQUVGLE1BQU0sT0FBTyxLQUFNLFNBQVEsS0FBSztJQUVyQixJQUFJLENBQVc7SUFDZixDQUFDLENBQWM7SUFDZixJQUFJLENBQXVDO0lBQzNDLEtBQUssQ0FBbUI7SUFDeEIsSUFBSSxDQUFtQjtJQUVqQyxZQUVDLFNBQWtCLEVBQ2xCLEdBQXNCLEVBQ3RCLEVBQTJCLEVBQzNCLEdBQWlCO1FBR2pCLEtBQUssQ0FBRSxTQUFTLENBQUUsQ0FBQztRQUVuQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUUsR0FBRyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUUsQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxhQUFhLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FBQztZQUMzQixJQUFJLENBQUMsVUFBVSxDQUFFLEdBQUcsQ0FBRSxDQUN0QjtRQUVELEVBQUUsRUFBRSxZQUFZLENBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFFLENBQUM7SUFDNUMsQ0FBQztJQUVELGNBQWM7SUFFSixhQUFhLENBQUUsR0FBa0I7UUFFMUMsTUFBTSxD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