import { Exist } from "../model/exist.js";
import { StringSource } from "../model/leaf.js";
import { defs } from "./defs.js";
import { createParts } from "./parts.js";
const log = console.log;
/** class Nodet
 *
 * DOMNode, DOMElementのプロパティーと要素をリアクティブにする委譲クラス。
 *
*/
export class Nodet extends Exist {
    parts;
    refs;
    acts;
    _e;
    constructor(container, def, ce, rel) {
        super(container);
        const node = (def instanceof defs.Element) ?
            this.createElement(def) :
            this.createText(def);
        ce?.insertBefore(node, rel || null);
    }
    /** element */
    createElement(def) {
        const e = this._e = document.createElement(def.type);
        let { attrs, props, acts } = def.echar || {};
        if (def.echar?.class) {
            this.bindClass(e, def.echar.class);
        }
        if (attrs) {
            for (let [name, value] of Object.entries(attrs)) {
                this.bindAttr(e, name, value);
            }
        }
        if (props) {
            for (let [name, value] of Object.entries(props)) {
                this.bindProp(e, name, value);
            }
        }
        if (acts) {
            for (let [name, act] of Object.entries(acts)) {
                this.bindAct(e, name, act);
            }
        }
        if (def.parts)
            this.parts = createParts(this, e, def.parts);
        attrs = undefined;
        return e;
    }
    bindClass(e, def) {
        if (typeof def == "string")
            e.className = def;
    }
    bindAttr(e, name, value) {
        this.refs = this.refs || new Exist.Refs;
        if (value instanceof StringSource) {
            value.createRef(this.refs, note => setAttr(e, name, note.newstr, value.tostr));
        }
        else
            setAttr(e, name, String(value));
    }
    bindProp(e, name, value) {
        this.refs = this.refs || new Exist.Refs;
        if (value instanceof StringSource) {
            value.createRef(this.refs, note => e[name] = note.newstr);
        }
        else
            e[name] = value;
    }
    bindAct(e, name, act) {
        this.acts = this.acts || new Map;
        if (this.acts.has(name))
            this.acts.get(name)?.push(act);
        else
            this.acts.set(name, [act]);
        e.addEventListener(name, act);
    }
    /** text */
    createText(text) {
        this.refs = this.refs || new Exist.Refs;
        const node = document.createTextNode("");
        if (text instanceof StringSource) {
            log("createText", text);
            text.createRef(this.refs, note => {
                log(` ** ${note.newstr} ${note.oldstr} ** `);
                node.nodeValue = note.newstr || "";
            });
        }
        else
            node.nodeValue = String(text);
        return node;
    }
    /** life */
    terminate() {
        if (this._e && this.acts) {
            for (let [name, acts] of this.acts) {
                log(name);
                acts.forEach(act => this._e?.removeEventListener(name, act));
            }
        }
        this.parts?.terminate();
        this.refs?.terminate();
        super.terminate();
    }
}
const setAttr = (e, name, value, tostr) => {
    e.setAttribute(name, tostr ? tostr(value) : String(value));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9ub2RldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWEsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckQsT0FBTyxFQUFTLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFnQixXQUFXLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFDdEQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4Qjs7OztFQUlFO0FBRUYsTUFBTSxPQUFPLEtBQU0sU0FBUSxLQUFLO0lBRXJCLEtBQUssQ0FBa0I7SUFDdkIsSUFBSSxDQUFnQjtJQUNwQixJQUFJLENBQXVDO0lBQzNDLEVBQUUsQ0FBYztJQUUxQixZQUVDLFNBQXNCLEVBQ3RCLEdBQXNCLEVBQ3RCLEVBQTJCLEVBQzNCLEdBQWlCO1FBR2pCLEtBQUssQ0FBRSxTQUFTLENBQUUsQ0FBQztRQUVuQixNQUFNLElBQUksR0FBRyxDQUFFLEdBQUcsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFFLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFFLEdBQUcsQ0FBRSxDQUFDLENBQUM7WUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBRSxHQUFHLENBQUUsQ0FDdEI7UUFFRCxFQUFFLEVBQUUsWUFBWSxDQUFFLElBQUksRUFBRSxHQUFHLElBQUksSUFBSSxDQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVELGNBQWM7SUFFSixhQUFhLENBQUUsR0FBa0I7UUFFMUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUV2RCxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJ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