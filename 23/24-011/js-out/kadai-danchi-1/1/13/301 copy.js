import { Leaf, ef } from "../../../meh/index.js";
import { PageA } from "../../models/index.js";
const create_model = (room) => {
    const model = {
        json: new Leaf.String(room, "JSON"),
        list: new Leaf.String(room, "リスト"),
        load: async () => {
            model.clear();
            const res = await fetch("https://www.jma.go.jp/bosai/quake/data/list.json");
            if (res.status == 200) {
                const data = await res.json();
                const list = data.map((i, n) => [
                    String(n + 1),
                    i.at.slice(0, 19).replace("T", " "),
                    i.anm,
                    i.mag,
                    i.maxi,
                    i.cod
                ]
                    .join("\t")).join("\n");
                model.list.value = list;
                model.json.value = JSON.stringify(data, null, "   ");
            }
        },
        clear: () => {
            model.json.value = "";
            model.list.value = "";
        },
        clear_json: () => model.json.value = "",
    };
    model.load();
    return model;
};
var ui;
(function (ui) {
    ui.Content = (room) => {
        const model = create_model(room);
        return ef.section({ class: "v-flex" }, ef.section(ef.button({ acts: { click: model.load } }, "Load"), ef.button({ acts: { click: model.clear } }, "Clear"), ef.button({ acts: { click: model.clear_json } }, "Clear JSON")), ef.section({ class: "v-flex" }, ta(model.list), ta(model.json), ef.p()));
    };
    const Item = () => {
        ;
    };
    const ta = (model) => ef.textarea({
        style: {
            height: "250px",
        },
        props: { value: model },
    });
})(ui || (ui = {}));
export const Page = (room) => PageA({
    index: room,
    content: ui.Content(room)
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzAxIGNvcHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90cy1zcmMva2FkYWktZGFuY2hpLTEvMS8xMy8zMDEgY29weS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFPLEVBQUUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFBZSxLQUFLLEVBQVEsTUFBTSx1QkFBdUIsQ0FBQztBQUVqRSxNQUFNLFlBQVksR0FBRyxDQUFFLElBQWdCLEVBQUcsRUFBRTtJQUUzQyxNQUFNLEtBQUssR0FDWDtRQUNDLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBRTtRQUNyQyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFFLElBQUksRUFBRSxLQUFLLENBQUU7UUFFcEMsSUFBSSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBRWhCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUVkLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFFLGtEQUFrRCxDQUFFLENBQUM7WUFDOUUsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsRUFDckI7Z0JBQ0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBRTlCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsQ0FBRSxDQUFPLEVBQUUsQ0FBVSxFQUFHLEVBQUUsQ0FDakQ7b0JBQ0MsTUFBTSxDQUFFLENBQUMsR0FBRyxDQUFDLENBQUU7b0JBQ2YsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFFO29CQUN2QyxDQUFDLENBQUMsR0FBRztvQkFDTCxDQUFDLENBQUMsR0FBRztvQkFDTCxDQUFDLENBQUMsSUFBSTtvQkFDTixDQUFDLENBQUMsR0FBRztpQkFDTDtxQkFDQSxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUUsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUM7Z0JBRTdCLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDeEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFDO2FBQ3ZEO1FBQ0YsQ0FBQztRQUVELEtBQUssRUFBRSxHQUFHLEVBQUU7WUFFWCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDdEIsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtLQUN2QyxDQUFBO0lBRUQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRWIsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDLENBQUE7QUFFRCxJQUFVLEVBQUUsQ0FzQ1g7QUF0Q0QsV0FBVSxFQUFFO0lBRUUsVUFBTyxHQUFHLENBQUUsSUFBZ0IsRUFBbUIsRUFBRTtRQUU3RCxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUUsSUFBSSxDQUFFLENBQUM7UUFFbkMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUVoQixFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsRUFDbkIsRUFBRSxDQUFDLE9BQU8sQ0FFVCxFQUFFLENBQUMsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLE1BQU0sQ0FBRSxFQUNwRCxFQUFFLENBQUMsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBRSxFQUN0RCxFQUFFLENBQUMsTUFBTSxDQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLFlBQVksQ0FBRSxDQUNoRSxFQUNELEVBQUUsQ0FBQyxPQUFPLENBRVQsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQ25CLEVBQUUsQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFFLEVBQ2hCLEVBQUUsQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFFLEVBQ2hCLEVBQUUsQ0FBQyxDQUFDLEVBQUksQ0FDUixDQUNELENBQUE7SUFDRixDQUFDLENBQUE7SUFFRCxNQUFNLElBQUksR0FBRyxHQUFHLEVBQUU7UUFFakIsQ0FBQztJQUNGLENBQUMsQ0FBQztJQUVGLE1BQU0sRUFBRSxHQUFHLENBQUUsS0FBbUIsRUFBRyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FDaEQ7UUFDQSxLQUFLLEVBQ0w7WUFDQyxNQUFNLEVBQUUsT0FBTztTQUNmO1FBQ0QsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRTtLQUN2QixDQUFDLENBQUM7QUFDSixDQUFDLEVBdENTLEVBQUUsS0FBRixFQUFFLFFBc0NYO0FBRUQsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFpQixDQUFFLElBQUksRUFBRyxFQUFFLENBQUMsS0FBSyxDQUNsRDtJQUNBLEtBQUssRUFBRSxJQUFJO0lBQ1gsT0FBTyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFO0NBQzNCLENBQUMsQ0FBQyJ9