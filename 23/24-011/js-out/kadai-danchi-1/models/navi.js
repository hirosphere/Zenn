import { Exist, navi, log, root } from "../../meh/index.js";
const ents = Object.entries;
const vals = Object.values;
const browser = new class extends navi.Browser {
    constructor() {
        super(root, {});
    }
    make_link(index) {
        const ps = {
            room: index.path.value,
        };
        return this.root + "?" + new URLSearchParams(ps).toString();
    }
};
class Index extends navi.Index {
}
const make_path = (index, con) => {
    return (con ? con.path.v + "-" : "") + index;
};
export class Danchi extends Exist {
    parts = {};
    constructor(con, src) {
        super(con);
        for (const [pindex, psrc] of ents(src.blocks)) {
            this.parts[pindex] = new Block(this, pindex, psrc, this.rooms);
        }
    }
    rooms = {};
}
export class Block extends Index {
    index;
    constructor(con, index, src, rooms) {
        super(con, browser, { path: make_path(index) });
        this.index = index;
        // log( this.path, "街区" );
        for (const [pindex, psrc] of ents(src.buildings)) {
            this.parts[pindex] = new Building(this, pindex, psrc, rooms);
        }
    }
    parts = {};
}
export class Building extends Index {
    index;
    constructor(con, index, src, rooms) {
        super(con, browser, { path: make_path(index, con) });
        this.index = index;
        log(this.path.v);
        for (const [pindex, psrc] of ents(src.rooms)) {
            this.parts[pindex] = new Room(this, pindex, psrc, rooms);
        }
    }
    parts = {};
}
export class Room extends Index {
    index;
    constructor(con, index, src, rooms) {
        super(con, browser, { title: src.title, path: make_path(index, con) });
        this.index = index;
        // log( this.path.v );
        // log( this.link );
        this.mod_path = `./${this.path.v.replace(/-/g, "/")}.js`;
        rooms[this.path.v] = this;
    }
    mod_path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9rYWRhaS1kYW5jaGktMS9tb2RlbHMvbmF2aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFRLEVBQU8sS0FBSyxFQUE2QixJQUFJLEVBQVcsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBS3RHLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7QUFDNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUUzQixNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQU0sU0FBUSxJQUFJLENBQUMsT0FBTztJQUU3QztRQUVDLEtBQUssQ0FBRSxJQUFJLEVBQUUsRUFBRSxDQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVlLFNBQVMsQ0FBRSxLQUFrQjtRQUU1QyxNQUFNLEVBQUUsR0FDUjtZQUNDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUs7U0FDdEIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxlQUFlLENBQUUsRUFBRSxDQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0QsQ0FBQztDQUNELENBQUM7QUFFRixNQUFNLEtBQU0sU0FBUSxJQUFJLENBQUMsS0FBSztDQUU3QjtBQUVELE1BQU0sU0FBUyxHQUFHLENBQUUsS0FBc0IsRUFBRSxHQUFhLEVBQUcsRUFBRTtJQUU3RCxPQUFPLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBRSxHQUFHLEtBQUssQ0FBQztBQUNoRCxDQUFDLENBQUE7QUFFRCxNQUFNLE9BQU8sTUFBTyxTQUFRLEtBQUs7SUFFaEMsS0FBSyxHQUFzQyxFQUFFLENBQUM7SUFFOUMsWUFBYSxHQUFRLEVBQUUsR0FBcUI7UUFFM0Ms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