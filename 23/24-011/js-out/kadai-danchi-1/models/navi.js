import { navi, log, root } from "../../meh/index.js";
const ents = Object.entries;
const vals = Object.values;
export const browser = new class extends navi.Browser {
    constructor() {
        super(root, {});
    }
    make_link(index) {
        const ps = {
            room: index.path.value,
        };
        return this.root + "?" + new URLSearchParams(ps).toString();
    }
};
export class Index extends navi.Index {
}
const make_path = (index, con) => {
    return (con ? con.path.v + "-" : "") + index;
};
export class Danchi extends Index {
    parts = {};
    constructor(con, src) {
        super(con, browser);
        for (const [pindex, psrc] of ents(src.blocks)) {
            this.parts[pindex] = new Block(this, pindex, psrc, this.rooms);
        }
    }
    rooms = {};
}
export class Block extends Index {
    index;
    constructor(con, index, src, rooms) {
        super(con, browser, { path: make_path(index) });
        this.index = index;
        // log( this.path, "街区" );
        for (const [pindex, psrc] of ents(src.buildings)) {
            this.parts[pindex] = new Building(this, pindex, psrc, rooms);
        }
    }
    parts = {};
}
export class Building extends Index {
    index;
    constructor(con, index, src, rooms) {
        super(con, browser, { path: make_path(index, con) });
        this.index = index;
        log(this.path.v);
        for (const [pindex, psrc] of ents(src.rooms)) {
            this.parts[pindex] = new Room(this, pindex, psrc, rooms);
        }
    }
    parts = {};
}
export class Room extends Index {
    index;
    src;
    constructor(con, index, src, rooms) {
        super(con, browser, { title: src.title, path: make_path(index, con) });
        this.index = index;
        this.src = src;
        // log( this.path.v );
        // log( this.link );
        this.mod_path = `./${this.path.v.replace(/-/g, "/")}.js`;
        rooms[this.path.v] = this;
    }
    get available() {
        return this.src.available ?? false;
    }
    mod_path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2aS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9rYWRhaS1kYW5jaGktMS9tb2RlbHMvbmF2aS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFRLEVBQXlDLElBQUksRUFBVyxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLdEcsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUM1QixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0FBRTNCLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBRyxJQUFJLEtBQU0sU0FBUSxJQUFJLENBQUMsT0FBTztJQUVwRDtRQUVDLEtBQUssQ0FBRSxJQUFJLEVBQUUsRUFBRSxDQUFFLENBQUM7SUFDbkIsQ0FBQztJQUVlLFNBQVMsQ0FBRSxLQUFrQjtRQUU1QyxNQUFNLEVBQUUsR0FDUjtZQUNDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUs7U0FDdEIsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxlQUFlLENBQUUsRUFBRSxDQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDL0QsQ0FBQztDQUNELENBQUM7QUFFRixNQUFNLE9BQU8sS0FBTSxTQUFRLElBQUksQ0FBQyxLQUFLO0NBRXBDO0FBRUQsTUFBTSxTQUFTLEdBQUcsQ0FBRSxLQUFzQixFQUFFLEdBQWEsRUFBRyxFQUFFO0lBRTdELE9BQU8sQ0FBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFLEdBQUcsS0FBSyxDQUFDO0FBQ2hELENBQUMsQ0FBQTtBQUVELE1BQU0sT0FBTyxNQUFPLFNBQVEsS0FBSztJQUVoQyxLQUFLLEdBQXNDLEVBQUUsQ0FBQztJQUU5QyxZQUFhLEdBQVEsRUFBRSxHQUFxQjtR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