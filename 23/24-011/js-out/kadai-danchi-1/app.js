import * as meh from "../meh/index.js";
import { root, Exist, Leafr, Leaf, Branch } from "../meh/index.js";
import { dom, ef } from "../meh/index.js";
const log = console.log;
const existquest = () => {
    const ex1 = new Exist(root);
    const ex2 = new Exist(ex1);
    const refs = new Exist.RefContainer();
    const ref = new Exist.Ref(refs, {});
    ref.source = ex1;
    ref.source = ex2;
    ref.ref_term();
    ex1.terminate();
};
const leafrefquest = () => {
    log("Ref Quest");
    const leafr = new Leafr.Boolean(root, false);
    const refs = new Exist.RefContainer();
    const ref = new meh.Leafr.Ref(refs, {});
    ref.source = new Leafr.Boolean(root, true);
    refs.refs_term();
    root.terminate();
};
const { main, article, section, h2, h3, p, button } = ef;
const letterrefquert = () => {
    const ex = new Exist(root);
    const nl1 = new Leaf.Number(ex, 0);
    const sl1 = new Leaf.String(ex, "Abc Def");
    const applet = article(h2("Letter Ref Quest"), section(nl1), section(sl1), section(button({ acts: { click() { sl1.value = "ZZzzzzz"; nl1.value++; } } }, "button")));
    const nodet = dom.create(ex, main(applet), "body", "#literal-main");
};
const domquest = () => {
    const ex = new Exist(root);
    const t = "";
    // const t2 : defs.Text = new Leafr.Boolean( ex, true ).conv( v => v ? "ハロー" : "グッバイ" );
    const attrs = { x: 1 };
    attrs.x = 0;
    // attrs.zzz = t2;
    attrs;
    const a2 = {};
    a2.childNodes;
    const acts = {};
    //
    const applet = article({ class: "applet" }, h2("DOM-Quest"), section({ class: "_content" }, h3("ツリー組み立て"), section("新橋", " ", "有楽町", " ", button("TERM"))));
    const applets = main(applet, HSL.Applet(ex));
    const nodet = dom.create(ex, applets, "body", "#literal-main");
};
var HSL;
(function (HSL) {
    class HSLBranch extends Branch {
        update() {
            ;
        }
    }
    HSL.Applet = (owner) => {
        const ex = new Exist(owner);
        const value = new Leaf.Number(ex, 33);
        return article({ class: "applet", }, h2("HSL Applet"), section({ class: "_content" }));
    };
})(HSL || (HSL = {}));
class VMBase extends Exist {
    refs = new Exist.RefContainer();
}
// existquest();
// leafrefquest();
// domquest();
letterrefquert();
export const name = "app";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdHMtc3JjL2thZGFpLWRhbmNoaS0xL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sRUFBUyxJQUFJLEVBQUUsS0FBSyxFQUFrQixLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFGLE9BQU8sRUFBUSxHQUFHLEVBQVMsRUFBRSxFQUFNLE1BQU0saUJBQWlCLENBQUM7QUFDM0QsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4QixNQUFNLFVBQVUsR0FBRyxHQUFHLEVBQUU7SUFFdkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUUsSUFBSSxDQUFFLENBQUM7SUFDOUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUUsR0FBRyxDQUFFLENBQUM7SUFDN0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFFLElBQUksRUFBRSxFQUFFLENBQUUsQ0FBQztJQUN0QyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUNqQixHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUNqQixHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDZixHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDakIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxZQUFZLEdBQUcsR0FBRyxFQUFFO0lBRXpCLEdBQUcsQ0FBRSxXQUFXLENBQUUsQ0FBQztJQUVuQixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFDO0lBQy9DLE1BQU0sSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3RDLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQWUsSUFBSSxFQUFFLEVBQUUsQ0FBRSxDQUFDO0lBRXZELEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUUsQ0FBQztJQUU3QyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDakIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ2xCLENBQUMsQ0FBQztBQUVGLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7QUFFekQsTUFBTSxjQUFjLEdBQUcsR0FBRyxFQUFFO0lBRTNCLE1BQU0sRUFBRSxHQUFHLElBQUksS0FBSyxDQUFFLElBQUksQ0FBRSxDQUFDO0lBRTdCLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBRSxFQUFFLEVBQUUsQ0FBQyxDQUFFLENBQUM7SUFDckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRSxTQUFTLENBQUUsQ0FBQztJQUU3QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBRXJCLEVBQUUsQ0FBRSxrQkFBa0IsQ0FBRSxFQUN4QixPQUFPLENBQUUsR0FBRyxDQUFFLEVBQ2QsT0FBTyxDQUFFLEdBQUcsQ0FBRSxFQUNkLE9BQU8sQ0FFTixNQUFNLENBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxLQUFLLEtBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFHLENBQUEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBRSxDQUNoRixDQUNELENBQUM7SUFFRixNQUFNLEtBQUssR0FBVyxHQUFHLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRSxJQUFJLENBQUUsTUFBTSxDQUFFLEVBQUUsTUFBTSxFQUFFLGVBQWUsQ0FBRSxDQUFDO0FBQ2pGLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRTtJQUVyQixNQUFNLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBRSxJQUFJLENBQUUsQ0FBQztJQUU3QixNQUFNLENBQUMsR0FBZSxFQUFFLENBQUM7SUFDekIsd0ZBQXdGO0lBRXhGLE1BQU0sS0FBSyxHQUFnQixFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUNwQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNaLGtCQUFrQjtJQUNsQixLQUFLLENBQUM7SUFFTixNQUFNLEVBQUUsR0FBZ0IsRUFBRSxDQUFDO0lBQzNCLEVBQUUsQ0FBQyxVQUFVLENBQUE7SUFFYixNQUFNLElBQUksR0FBbUIsRUFBRSxDQUFDO0lBR2hDLEVBQUU7SUFFRixNQUFNLE1BQU0sR0FBRyxPQUFPLENBRXJCLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUVuQixFQUFFLENBQUUsV0FBVyxDQUFFLEVBRWpCLE9BQU8sQ0FFTixFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsRUFFckIsRUFBRSxDQUFFLFNBQVMsQ0FBRSxFQUNmLE9BQU8sQ0FFTixJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFFLE1BQU0sQ0FBRSxDQUN2QyxDQUNELENBQ0QsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBRSxFQUFFLENBQUUsQ0FBRSxDQUFDO0lBRWpELE1BQU0sS0FBSyxHQUFXLEdBQUcsQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsZUFBZSxDQUFFLENBQUM7QUFDMUUsQ0FBQyxDQUFDO0FBRUYsSUFBVSxHQUFHLENBeUJaO0FBekJELFdBQVUsR0FBRztJQUVaLE1BQU0sU0FBVSxTQUFRLE1BQU07UUFHYixNQUFNO1lBRXJCLENBQUM7UUFDRixDQUFDO0tBQ0Q7SUFFWSxVQUFNLEdBQUcsQ0FBRSxLQUFhLEVBQWUsRUFBRTtRQUVyRCxNQUFNLEVBQUUsR0FBRyxJQUFJLEtBQUssQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUM5QixNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBRSxDQUFDO1FBRXhDLE9BQU8sT0FBTyxDQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsR0FBRyxFQUNuQyxFQUFFLENBQUUsWUFBWSxDQUFFLEVBQ2xCLE9BQU8sQ0FFTixFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsQ0FFckIsQ0FDRCxDQUFDO0lBQ0gsQ0FBQyxDQUFBO0FBQ0YsQ0FBQyxFQXpCUyxHQUFHLEtBQUgsR0FBRyxRQXlCWjtBQUVELE1BQWUsTUFBYSxTQUFRLEtBQUs7SUFFOUIsSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0NBRzFDO0FBTUQsZ0JBQWdCO0FBQ2hCLGtCQUFrQjtBQUNsQixjQUFjO0FBQ2QsY0FBYyxFQUFFLENBQUM7QUFFakIsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyJ9