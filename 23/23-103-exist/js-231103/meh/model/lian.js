// class Lian ( 連：リエン・れん ) Arrayをリアクティブにするクラス //
import { Leaf } from "./leaf.js";
const log = console.log;
export class Lian extends Array {
    static create(srcvalue = []) {
        const rt = new Lian();
        rt.set(srcvalue);
        return rt;
    }
    //  //
    set(array) {
        this.clear();
        array.forEach((value, order) => this[order] = new Item(this, order, value));
    }
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    // order operations //
    swap(orderA, orderB) {
        ;
    }
    add(itemValue, order) {
        const ord = regnext(this, order);
        this.splice(ord, 0, new Item(this, ord, itemValue));
        this.reorder(ord, this.length);
        this.refs.forEach(ref => ref.add?.(ord, 1));
    }
    removeItem(item) {
        const order = item.order.value;
        if (order < 0 || this.length <= order)
            return;
        this.splice(order, 1);
        this.reorder(order, this.length);
        this.refs.forEach(ref => ref.remove?.(order, 1));
    }
    clear() {
        const len = this.length;
        this.refs.forEach((ref) => ref.remove?.(0, len));
        this.length = 0;
    }
    //  //
    reorder(start, next) {
        for (let ord = start; ord < next; ord++) {
            this[ord].order.value = ord;
        }
    }
}
const regnext = (ar, order) => {
    if (order == undefined || order > ar.length || order < 0)
        return ar.length;
    return order;
};
class Item extends Leaf {
    order;
    isLast = new Leaf.Boolean(false);
    lian;
    constructor(lian, order, value) {
        super(value);
        this.order = new Leaf.Number(order);
        this.lian = lian;
    }
    remove() {
        this.lian?.removeItem(this);
        this.lian = null;
    }
}
export const LianItem = Item;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGlhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnREFBZ0Q7QUFFaEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVqQyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLE1BQU0sT0FBTyxJQUFpQixTQUFRLEtBQW9CO0lBRXpELE1BQU0sQ0FBQyxNQUFNLENBQVMsV0FBeUIsRUFBRTtRQUVoRCxNQUFNLEVBQUUsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3RCLEVBQUUsQ0FBQyxHQUFHLENBQUUsUUFBUSxDQUFFLENBQUM7UUFDbkIsT0FBTyxFQUFFLENBQUM7SUFDWCxDQUFDO0lBRUQsTUFBTTtJQUVDLEdBQUcsQ0FBRSxLQUFtQjtRQUU5QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDYixLQUFLLENBQUMsT0FBTyxDQUFFLENBQUUsS0FBSyxFQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBRSxHQUFHLElBQUksSUFBSSxDQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFFLENBQUUsQ0FBQztJQUNyRixDQUFDO0lBRVMsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO0lBRWxDLEdBQUcsQ0FBRSxHQUFjO1FBRXpCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxzQkFBc0I7SUFFZixJQUFJLENBQUUsTUFBZSxFQUFFLE1BQWU7UUFFNUMsQ0FBQztJQUNGLENBQUM7SUFFTSxHQUFHLENBQUUsU0FBYSxFQUFFLEtBQWdCO1FBRTFDLE1BQU0sR0FB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