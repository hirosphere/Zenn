import { Leaf, ToString } from "../model/leaf.js";
import { Parts } from "./parts.js";
const log = console.log;
class Refs extends Set {
}
//
export class Nodette {
    node;
    element;
    parts;
    refs = new Refs;
    constructor(def, comNode, rel) {
        const ce = (comNode instanceof Element) ? comNode : null;
        this.createNode(def, ce, rel);
    }
    createNode(def, ce, rel) {
        if (typeof def == "object" && "isElement" in def)
            return this.createElement(def, ce, rel);
        else
            return this.createText(def, ce, rel);
    }
    createElement(def, ce, rel) {
        const { type, class: className, props, attrs, style, acts, actActs, optActs, parts } = def;
        const e = document.createElement(type);
        this.node = this.element = e;
        if (className)
            this.bindClass(e, className);
        if (props)
            this.bindProps(e, props);
        if (attrs)
            this.bindAttrs(e, attrs);
        if (style)
            this.bindStyle(e, style);
        if (acts)
            this.bindActs(e, acts);
        if (actActs)
            this.bindActs(e, actActs, { passive: false });
        if (optActs)
            this.bindOptActs(e, optActs);
        if (def.parts)
            this.parts = Parts.create(this, e, def.parts);
        if (ce)
            ce.insertBefore(e, rel || null);
        return e;
    }
    createText(def, ce, rel) {
        const node = document.createTextNode("");
        bindText(node, "nodeValue", def, this.refs);
        if (ce)
            ce.insertBefore(node, rel || null);
        this.node = node;
        return node;
    }
    // bind opers //
    bindClass(e, def) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(e, subdef);
            return;
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bindText(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindProps(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e, name, value, this.refs);
        }
    }
    bindAttrs(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindAttr(e, name, value, this.refs);
        }
    }
    bindStyle(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e.style, name, value, this.refs);
        }
    }
    bindActs(e, def, opt) {
        for (const [name, act] of Object.entries(def)) {
            e.addEventListener(name, act, opt);
        }
    }
    bindOptActs(e, def) {
        for (const [name, actdef] of Object.entries(def)) {
            const [act, opt] = actdef;
            e.addEventListener(name, act, opt);
            log("optAct", name, opt);
        }
    }
    //  //
    delete() {
        this.node?.parentElement?.removeChild(this.node);
        this.parts?.delete();
        this.refs.forEach(ref => ref.release());
        this.refs.clear();
    }
}
// binds //
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref((value) => e.classList.toggle(name, value)));
    }
    else
        e.classList.toggle(name, value);
};
const bindAttr = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref(() => setAttr(e, name, value.get())));
    }
    else if (value instanceof ToString) {
        refs.add(value.ref(() => setAttr(e, name, value.toString())));
    }
    else
        setAttr(e, name, value);
};
const setAttr = (e, name, value) => {
    if (typeof value == "boolean") {
        value ? e.setAttribute(name, "") : e.removeAttribute(name);
    }
    else {
        e.setAttribute(name, String(value));
    }
};
export const bindText = (target, name, text, refs) => {
    if (text instanceof ToString) {
        refs.add(text.ref(() => { target[name] = text.toString(); }));
    }
    else
        target[name] = text;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9jb21wby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFZLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbkMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4QixNQUFNLElBQUssU0FBUSxHQUFXO0NBQUc7QUFFakMsRUFBRTtBQUVGLE1BQU0sT0FBTyxPQUFPO0lBRVosSUFBSSxDQUFVO0lBQ2QsT0FBTyxDQUFhO0lBQ25CLEtBQUssQ0FBVztJQUNoQixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUM7SUFFeEIsWUFBYSxHQUFlLEVBQUUsT0FBaUMsRUFBRSxHQUFZO1FBRTVFLE1BQU0sRUFBRSxHQUFHLENBQUUsT0FBTyxZQUFZLE9BQU8sQ0FBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUUzRCxJQUFJLENBQUMsVUFBVSxDQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDakMsQ0FBQztJQUVPLFVBQVUsQ0FBRSxHQUFlLEVBQUUsRUFBbUIsRUFBRSxHQUFZO1FBRXJFLElBQUksT0FBTyxHQUFHLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxHQUFHO1lBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7O1lBQ3hGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBRSxDQUFDO0lBQzlDLENBQUM7SUFFTyxhQUFhLENBQUUsR0FBa0IsRUFBRSxFQUFtQixFQUFFLEdBQVk7UUFFM0UsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVB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