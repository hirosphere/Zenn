import { defs } from "./defs.js";
import { Nodette } from "./nodette.js";
import { Lian } from "../model/lian.js";
const log = console.log;
//  //
export class Parts {
    static create(nodet, def) {
        return createParts(nodet, def, 0);
    }
    partNodets = new Array;
    next;
}
//  //
export const createParts = (nodet, def, index) => {
    let parts;
    const partdef = def[index];
    if (partdef instanceof defs.ArrayParts) {
        index++;
        parts = new ArrayParts(partdef, nodet);
    }
    else {
        const flagdef = [];
        while (index < def.length) {
            const partdef = def[index];
            if (partdef instanceof defs.ArrayParts)
                break;
            flagdef.push(partdef);
            index++;
        }
        parts = new StaticParts(nodet, flagdef, index);
    }
    if (index < def.length) {
        parts.next = createParts(nodet, def, index);
        log("next", parts.next);
    }
    return parts;
};
class StaticParts extends Parts {
    nodet;
    constructor(nodet, def, index) {
        super();
        this.nodet = nodet;
        def.forEach(def => this.createPartNodet(def));
        this._firstnodet = this.partNodets[0];
    }
    createPartNodet(def) {
        const part = new Nodette(def, this.nodet.element);
        this.partNodets.push(part);
    }
    get firstnode() {
        return this._firstnodet?.node || this.next?.firstnode;
    }
    _firstnodet;
    delete() {
        this.next?.delete();
    }
}
class ArrayParts extends Parts {
    def;
    nodet;
    constructor(def, nodet) {
        super();
        this.def = def;
        this.nodet = nodet;
        //this.def.source.forEach( partmodel => this.createPart( partmodel ) );
        log("ct", this.def.source.length);
        if (def.source instanceof Lian)
            def.source.ref(this);
        else
            this.add(0, def.source.length);
    }
    // Lian Ref オペレーション //
    add(start, count) {
        const next = start + count;
        const partmodels = this.def.source.slice(start, next);
        const nextnode = this.partNodets[next]?.node || this.next?.firstnode;
        const nodets = partmodels.map(partmodel => this.createPart(partmodel, nextnode));
        this.partNodets.splice(start, 0, ...nodets);
    }
    remove(start, count) {
        const rem = this.partNodets.splice(start, count);
        rem.forEach(nodet => nodet.delete());
    }
    //  //
    createPart(model, nextNode) {
        const partdef = this.def.create(model);
        return new Nodette(partdef, this.nodet.element, nextNode);
    }
    get firstnode() {
        return this.partNodets.length && this.partNodets[0].node || this.next?.firstnode;
    }
    delete() {
        this.next?.delete();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBRSxPQUFPLEVBQVksTUFBTSxjQUFjLENBQUM7QUFDakQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXhDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFeEIsTUFBTTtBQUVOLE1BQU0sT0FBZ0IsS0FBSztJQUVuQixNQUFNLENBQUMsTUFBTSxDQUFFLEtBQWUsRUFBRSxHQUFnQjtRQUV0RCxPQUFPLFdBQVcsQ0FBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBRSxDQUFDO0lBQ3JDLENBQUM7SUFFbUIsVUFBVSxHQUFHLElBQUksS0FBaUIsQ0FBQztJQUloRCxJQUFJLENBQVc7Q0FFdEI7QUFFRCxNQUFNO0FBRU4sTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFHLENBQUUsS0FBZSxFQUFFLEdBQWdCLEVBQUUsS0FBYyxFQUFXLEVBQUU7SUFFMUYsSUFBSSxLQUFhLENBQUM7SUFFbEIsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFFLEtBQUssQ0FBRSxDQUFDO0lBQzdCLElBQUksT0FBTyxZQUFZLElBQUksQ0FBQyxVQUFVLEVBQ3RDO1FBQ0MsS0FBSyxFQUFHLENBQUM7UUFDVCxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUUsT0FBTyxFQUFFLEtBQUssQ0FBRSxDQUFDO0tBQ3pDO1NBRUQ7UUFDQyxNQUFNLE9BQU8sR0FBaUIsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQ3pCO1lBQ0MsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFFLEtBQUssQ0FBRSxDQUFDO1lBQzdCLElBQUksT0FBTyxZQUFZLElBQUksQ0FBQyxVQUFVO2dCQUFHLE1BQU07WUFDL0MsT0FBTyxDQUFDLElBQUksQ0FBRSxPQUFPLENBQUUsQ0FBQztZQUN4QixLQUFLLEVBQUcsQ0FBQztTQUNUO1FBQ0QsS0FBSyxHQUFHLElBQUksV0FBVyxDQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFFLENBQUM7S0FDakQ7SUFFRCxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFHO1FBQ3hCLEtBQUssQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFFLENBQUM7UUFDOUMsR0FBRyxDQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFFLENBQUM7S0FDMUI7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUMsQ0FBQztBQUdGLE1BQU0sV0FBWSxTQUFRLEtBQUs7SUFFVDtJQUFyQixZQUFxQixLQUFlLEVBQUUsR0FBa0IsRUFBRSxLQUFjO1FBRXZFLEtBQUssRUFBRSxDQUFDO1FBRlksVUFBSyxHQUFMLEtBQUssQ0FBVTtRQUduQyxHQUFHLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBRSxHQUFHLENBQUUsQ0FBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDLENBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsZUFBZSxDQUFFLEdBQWU7UUFFL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFFLENBQUM7UUFDcEQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQVcsU0FBUztRQUVuQixPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDO0lBQ3ZELENBQUM7SUFFTyxXQUFXLENBQWE7SUFFaEMsTUFBTTtRQUVMLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDckIsQ0FBQztDQUNEO0FBR0QsTUFBTSxVQUFXLFNBQVEsS0FBSztJQUVOO0lBQStCO0lBQXRELFlBQXVCLEdBQXFCLEVBQVUsS0FBZTtRQUVwRSxLQUFLLEVBQUUsQ0FBQztRQUZjLFFBQUcsR0FBSCxHQUFHLENBQWtCO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBVTtRQUlwRSx1RUFBdUU7UUFFdkUsR0FBRyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQTtRQUVuQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLFlBQVksSUFBSTtZQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFDOztZQUNuRCxJQUFJLENBQUMsR0FBRyxDQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxzQkFBc0I7SUFFdEIsR0FBRyxDQUFFLEtBQWMsRUFBRSxLQUFjO1FBRWxDLE1BQU0sSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFM0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFFLEtBQUssRUFBRSxJQUFJLENBQUUsQ0FBQztRQUV4RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFFLElBQUksQ0FBRSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQztRQUV2RSxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxDQUU1QixTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBRSxDQUNuRCxDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFJLE1BQU0sQ0FBRSxDQUFDO0lBQ2hELENBQUM7SUFHRCxNQUFNLENBQUUsS0FBYyxFQUFFLEtBQWM7UUFFckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUUsS0FBSyxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ25ELEdBQUcsQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsTUFBTTtJQUVJLFVBQVUsQ0FBRSxLQUFXLEVBQUUsUUFBaUI7UUFFbkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUUsS0FBSyxDQUFFLENBQUM7UUFDekMsT0FBTyxJQUFJLE9BQU8sQ0FBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFFLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQUksU0FBUztRQUVaLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBRSxDQUFDLENBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUM7SUFDcEYsQ0FBQztJQUVNLE1BQU07UUFFWixJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0lBQ3JCLENBQUM7Q0FDRCJ9