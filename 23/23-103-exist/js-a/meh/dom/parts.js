import { defs } from "./defs.js";
import { bindText } from "./compo.js";
import { Lian } from "../model/lian.js";
const log = console.log;
// part def reader //
class Reader {
    parts;
    index = 0;
    constructor(parts) {
        this.parts = parts;
    }
    get cur() { return this.parts[this.index]; }
    get next() { return this.parts[this.index++]; }
    get hasnext() { return this.parts[this.index] != null; }
    get nextap() {
        const cur = this.cur;
        if (cur instanceof defs.ArrayParts) {
            this.index++;
            return cur;
        }
    }
}
//  //
export class Parts {
    compo;
    ce;
    static create(compo, ce, parts) {
        const rd = new Reader(parts);
        return new StaticParts(compo, ce, rd, null);
    }
    //  //
    next;
    prev;
    constructor(compo, ce, prev) {
        this.compo = compo;
        this.ce = ce;
        this.prev = prev;
        if (prev)
            prev.next = this;
    }
    //  //
    createPart(def) {
        if (typeof def == "object" && "isElement" in def) {
            return this.compo.createElement(def, this.ce);
        }
        const n = document.createTextNode("");
        bindText(n, "nodeValue", def, this.compo.refs);
        this.ce.appendChild(n);
        return n;
    }
    delete() { }
}
// static parts //
export class StaticParts extends Parts {
    constructor(compo, ce, rd, prev) {
        super(compo, ce, prev);
        while (rd.hasnext) {
            this.ap(rd);
            if (this.next)
                break; // next が作成されたらループ終了 //
            const node = this.lastnode = this.createPart(rd.next);
            this.firstnode = this.firstnode || node;
        }
    }
    ap(rd) {
        const ap = rd.nextap;
        if (!ap)
            return;
        // dynamic parts //
        if (ap.source instanceof Lian) {
            log("ap * dyn", ap.source);
            new DynamicParts(this.compo, this.ce, ap, rd, this);
            return;
        }
        // static parts //
        log("pa * stat", ap.source);
        ap.source.forEach(item => {
            const def = ap.create(item);
            log("ap*stat", def);
            this.createPart(def);
        });
    }
    //  //
    lastnode;
    firstnode;
    //  //
    //  //
    delete() {
        this;
    }
}
//  dynamic parts //
class DynamicParts extends Parts {
    constructor(compo, ce, ap, rd, prev) {
        log("**dyn**");
        super(compo, ce, prev);
        if (ap.source instanceof Array) {
            ap.source.forEach(part => this.createPart(ap.create(part)));
        }
        if (rd.hasnext)
            new StaticParts(compo, ce, rd, this);
    }
}
function last(arr) {
    return arr[arr.length - 1];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9wYXJ0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBYSxRQUFRLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDakQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXhDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFeEIscUJBQXFCO0FBRXJCLE1BQU0sTUFBTTtJQUdVO0lBRGIsS0FBSyxHQUFZLENBQUMsQ0FBQztJQUMzQixZQUFxQixLQUFtQjtRQUFuQixVQUFLLEdBQUwsS0FBSyxDQUFjO0lBQUcsQ0FBQztJQUU1QyxJQUFJLEdBQUcsS0FBNkIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdEUsSUFBSSxJQUFJLEtBQWlCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUQsSUFBSSxPQUFPLEtBQWUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXBFLElBQUksTUFBTTtRQUVULE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDckIsSUFBSSxHQUFHLFlBQVksSUFBSSxDQUFDLFVBQVUsRUFDbEM7WUFDQyxJQUFJLENBQUMsS0FBSyxFQUFHLENBQUM7WUFDZCxPQUFPLEdBQUcsQ0FBQztTQUNYO0lBQ0YsQ0FBQztDQUNEO0FBRUQsTUFBTTtBQUVOLE1BQU0sT0FBTyxLQUFLO0lBYU07SUFBNkI7SUFYcEQsTUFBTSxDQUFDLE1BQU0sQ0FBRSxLQUFpQixFQUFF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