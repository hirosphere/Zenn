import { Leaf, ToString } from "../model/leaf.js";
import { Parts } from "./parts2.js";
const log = console.log;
class Refs extends Set {
}
//
export class Component {
    e;
    partsSet = new Set;
    refs = new Refs;
    constructor(def, ce, rel) {
        this.e = this.createElement(def, ce, rel);
    }
    createNode(def, ce, rel) {
        if (typeof def == "object" && "isElement" in def)
            return this.createElement(def, ce, rel);
        else
            return this.createText(def, ce, rel);
    }
    createElement(def, ce, rel) {
        const { type, class: className, props, attrs, style, acts, actActs, optActs, parts } = def;
        const e = document.createElement(type);
        if (className)
            this.bindClass(e, className);
        if (props)
            this.bindProps(e, props);
        if (attrs)
            this.bindAttrs(e, attrs);
        if (style)
            this.bindStyle(e, style);
        if (acts)
            this.bindActs(e, acts);
        if (actActs)
            this.bindActs(e, actActs, { passive: false });
        if (optActs)
            this.bindOptActs(e, optActs);
        if (parts)
            this.partsSet.add(Parts.create(this, e, parts));
        if (ce)
            ce.insertBefore(e, rel || null);
        return e;
    }
    createText(def, ce, rel) {
        const node = document.createTextNode("");
        bindText(node, "nodeValue", def, this.refs);
        if (ce)
            ce.insertBefore(node, rel || null);
        return node;
    }
    // bind opers //
    bindClass(e, def) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(e, subdef);
            return;
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bindText(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindProps(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e, name, value, this.refs);
        }
    }
    bindAttrs(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindAttr(e, name, value, this.refs);
        }
    }
    bindStyle(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e.style, name, value, this.refs);
        }
    }
    bindActs(e, def, opt) {
        for (const [name, act] of Object.entries(def)) {
            e.addEventListener(name, act, opt);
        }
    }
    bindOptActs(e, def) {
        for (const [name, actdef] of Object.entries(def)) {
            const [act, opt] = actdef;
            e.addEventListener(name, act, opt);
            log("optAct", name, opt);
        }
    }
    //  //
    delete() {
        this.partsSet.forEach(parts => parts.delete());
        this.partsSet.clear();
        this.refs.forEach(ref => ref.release());
        this.refs.clear();
        delete this.e;
    }
}
// binds //
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref((value) => e.classList.toggle(name, value)));
    }
    else
        e.classList.toggle(name, value);
};
const bindAttr = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref(() => setAttr(e, name, value.get())));
    }
    else if (value instanceof ToString) {
        refs.add(value.ref(() => setAttr(e, name, value.toString())));
    }
    else
        setAttr(e, name, value);
};
const setAttr = (e, name, value) => {
    if (typeof value == "boolean") {
        value ? e.setAttribute(name, "") : e.removeAttribute(name);
    }
    else {
        e.setAttribute(name, String(value));
    }
};
export const bindText = (target, name, text, refs) => {
    if (text instanceof ToString) {
        refs.add(text.ref(() => { target[name] = text.toString(); }));
    }
    else
        target[name] = text;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9jb21wby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFZLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4QixNQUFNLElBQUssU0FBUSxHQUFXO0NBQUc7QUFFakMsRUFBRTtBQUVGLE1BQU0sT0FBTyxTQUFTO0lBRXJCLENBQUMsQ0FBYTtJQUNkLFFBQVEsR0FBRyxJQUFJLEdBQWEsQ0FBQztJQUM3QixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUM7SUFFaEIsWUFBYSxHQUFrQixFQUFFLEVBQW1CLEVBQUUsR0FBWTtRQUVqRSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsVUFBVSxDQUFFLEdBQWUsRUFBRSxFQUFtQixFQUFFLEdBQVk7UUFFN0QsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLEdBQUc7WUFBSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUUsQ0FBQzs7WUFDeEYsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVELGFBQWEsQ0FBRSxHQUFrQixFQUFFLEVBQW1CLEVBQUUsR0FBWTtRQUVuRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVB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