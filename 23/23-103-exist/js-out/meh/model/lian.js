/*
    [ class Lian ]

    要素の順序・構成の変更通知が得られるArray。

    DOMエレメントのchildNodesの動的な構成変更を実現するために、モデルとして使用。
*/
import { Leaf, setRoValue } from "./leaf.js";
const log = console.log;
/** owner : symbol  OederがLianを保持するために使用。 */
const owner = Symbol();
const readonlykey = {};
/** class Lian */
export class Lian extends Array {
    vlength = new Leaf.Ro.Number(0, { readonlykey });
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    // order life methods //
    insert(create, count) {
        const ords = [];
        for (let i = 0; i < count; i++)
            ords.push(create());
        this.addOrders(ords, this.length);
    }
    addOrder(order, pos) {
        this.addOrders([order], pos);
    }
    removeOrder(order) {
        if (order[owner] != this)
            return;
        this.removeOrders(order.pos.val, 1);
    }
    addOrders(orders, start) {
        if (orders.length == 0)
            return this;
        const st = regnext(this, start);
        this.splice(st, 0, ...orders);
        orders.forEach(order => order[owner] = this);
        this.vlength[setRoValue](readonlykey, this.length);
        this.reposit(st, this.length);
        this.refs.forEach(ref => ref.add?.(st, orders.length));
        return this;
    }
    removeOrders(start, count) {
        if (start < 0 || this.length <= start)
            return;
        const rems = this.splice(start, count);
        rems.forEach(rem => rem[owner] = null);
        this.vlength[setRoValue](readonlykey, this.length);
        this.reposit(start, start + rems.length);
        this.refs.forEach(ref => ref.remove?.(start, rems.length));
    }
    clear() {
        const len = this.length;
        this.refs.forEach((ref) => ref.remove?.(0, len));
        this.length = 0;
        this.vlength[setRoValue](readonlykey, this.length);
    }
    //  //
    reposit(start, next) {
        next = Math.min(next, this.length);
        for (let pos = start; pos < next; pos++) {
            this[pos].pos[setRoValue](readonlykey, pos);
        }
    }
    //  //
    terminate() {
        this.clear();
        this.refs.clear();
    }
}
export class Order {
    [owner] = null;
    pos;
    constructor() {
        this.pos = new Leaf.Ro.Number(-1, { readonlykey });
    }
    remove() { log("remove", this.pos.v); this[owner]?.removeOrder(this); }
    terminate() {
        this.remove();
        this[owner] = null;
    }
}
const regnext = (ar, pos) => {
    if (pos == undefined || pos > ar.length)
        return ar.length;
    if (pos < 0)
        return 0;
    return pos;
};
//   //
export class LianV extends Lian {
    static create(values) {
        return new LianV().addValues(values);
    }
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    //  //
    addValues(values, start) {
        const orders = values.map(value => new OrderV(value));
        this.addOrders(orders, start);
        return this;
    }
    addValue(value, position) {
        const o = new OrderV(value);
        this.addOrder(o, position);
    }
}
export class OrderV extends Order {
    value;
    constructor(value) {
        super();
        this.value = value;
    }
    get v() { return this.value; }
    get val() { return this.value; }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGlhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUFFRixPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU3QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLDRDQUE0QztBQUU1QyxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUN2QixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFHdkIsaUJBQWlCO0FBRWpCLE1BQU0sT0FBTyxJQUErQixTQUFRLEtBQVc7SUFFOUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUUsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUUsQ0FBQztJQUN6RCxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFFbEMsR0FBRyxDQUFFLEdBQWM7UUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELHdCQUF3QjtJQUVqQixNQUFNLENBQUUsTUFBZ0IsRUFBRSxLQUFjO1FBRTlDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRztZQUFJLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxFQUFFLENBQUUsQ0FBQztRQUN6RCxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUM7SUFDckMsQ0FBQztJQUVNLFFBQVEsQ0FBRSxLQUFTLEVBQUUsR0FBYztRQUV6QyxJQUFJLENBQUMsU0FBUyxDQUFFLENBQUUsS0FBSyxDQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVNLFdBQVcsQ0FBRSxLQUFRO1FBRTNCLElBQUksS0FBSyxDQUFFLEtBQUssQ0FBRSxJQUFJLElBQUk7WUFBRyxPQUFPO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVNLFNBQVMsQ0FBRSxNQUFZLEVBQUUsS0FBZ0I7UUFFL0MsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUM7WUFBRyxPQUFPLElBQUksQ0FBQztRQUVyQyxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFJLE1BQU0sQ0FBRSxDQUFDO1FBRWpDLE1BQU0sQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUUsS0FBSyxDQUFFLEdBQUcsSUFBSSxDQUFFLENBQUM7UUFFakQsSUFBSSxDQUFDLE9BQU8sQ0FBRSxVQUFVLENBQUUsQ0FBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQ3ZELElBQUksQ0FBQyxPQUFPLENBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFHLENBQUM7UUFFN0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRU0sWUFBWSxDQUFFLEtBQWMsRUFBRSxLQUFnQjtRQUVwRCxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxLQUFLO1lBQUksT0FBTztRQUVoRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFFLEtBQUssRUFBRSxLQUFLLENBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBRSxHQUFHLElBQUksQ0FBRSxDQUFDO1FBRTNDLElBQUksQ0FBQyxPQUFPLENBQUUsVUFBVSxDQUFFLENBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUcsQ0FBQztJQUNsRSxDQUFDO0lBRU0sS0FBSztRQUVYLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUcsQ0FBRSxHQUFHLEVBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFFLENBQUcsQ0FBQztRQUN6RCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFFLFVBQVUsQ0FBRSxDQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVELE1BQU07SUFFSSxPQUFPLENBQUUsS0FBYyxFQUFFLElBQWE7UUFFL0MsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUNyQyxLQUFLLElBQUksR0FBRyxHQUFHLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFH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