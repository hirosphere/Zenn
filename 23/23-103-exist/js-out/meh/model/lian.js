/*
    [ class Lian ]

    要素の順序・構成の変更通知が得られるArray。

    DOMエレメントのchildNodesの動的な構成変更を実現するために、モデルとして使用。
*/
import { Leaf, setRoValue } from "./leaf.js";
const log = console.log;
/** owner : symbol  OederがLianを保持するために使用。 */
const owner = Symbol();
/** class Lian */
export class Lian extends Array {
    vlength = new Leaf.Ro.Number(0, { owner: this });
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    // order life methods //
    insert(create, count) {
        const ords = [];
        for (let i = 0; i < count; i++)
            ords.push(create());
        this.addOrders(ords, this.length);
    }
    addOrder(order, pos) {
        this.addOrders([order], pos);
    }
    removeOrder(order) {
        if (order[owner] != this)
            return;
        this.removeOrders(order.pos.val, 1);
    }
    addOrders(orders, start) {
        if (orders.length == 0)
            return this;
        const st = regnext(this, start);
        this.splice(st, 0, ...orders);
        orders.forEach(order => order[owner] = this);
        this.vlength[setRoValue](this, this.length);
        this.reposit(st, this.length);
        this.refs.forEach(ref => ref.add?.(st, orders.length));
        return this;
    }
    removeOrders(start, count) {
        if (start < 0 || this.length <= start)
            return;
        const rems = this.splice(start, count);
        rems.forEach(rem => rem[owner] = null);
        this.vlength[setRoValue](this, this.length);
        this.reposit(start, start + rems.length);
        this.refs.forEach(ref => ref.remove?.(start, rems.length));
    }
    clear() {
        const len = this.length;
        this.refs.forEach((ref) => ref.remove?.(0, len));
        this.length = 0;
        this.vlength[setRoValue](this, this.length);
    }
    //  //
    reposit(start, next) {
        for (let pos = start; pos < next && pos < this.length; pos++) {
            this[pos].pos[setRoValue](this, pos);
        }
    }
    //  //
    terminate() {
        this.clear();
        this.refs.clear();
    }
}
export class Order {
    [owner] = null;
    pos;
    constructor() {
        this.pos = new Leaf.Ro.Number(-1, { owner });
    }
    remove() { this[owner]?.removeOrder(this); }
    terminate() {
        this.remove();
        this[owner] = null;
    }
}
const regnext = (ar, pos) => {
    if (pos == undefined || pos > ar.length)
        return ar.length;
    if (pos < 0)
        return 0;
    return pos;
};
//   //
export class LianV extends Lian {
    static create(values) {
        return new LianV().addValues(values);
    }
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    //  //
    addValues(values, start) {
        const orders = values.map(value => new OrderV(value));
        this.addOrders(orders, start);
        return this;
    }
    addValue(value, position) {
        const o = new OrderV(value);
        this.addOrder(o, position);
    }
}
export class OrderV extends Order {
    value;
    constructor(value) {
        super();
        this.value = value;
    }
    get v() { return this.value; }
    get val() { return this.value; }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGlhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUFFRixPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU3QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLDRDQUE0QztBQUU1QyxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUV2QixpQkFBaUI7QUFFakIsTUFBTSxPQUFPLElBQStCLFNBQVEsS0FBVztJQUU5QyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBRSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBQztJQUN6RCxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFFbEMsR0FBRyxDQUFFLEdBQWM7UUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELHdCQUF3QjtJQUVqQixNQUFNLENBQUUsTUFBZ0IsRUFBRSxLQUFjO1FBRTlDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRztZQUFJLElBQUksQ0FBQyxJQUFJLENBQUUsTUFBTSxFQUFFLENBQUUsQ0FBQztRQUN6RCxJQUFJLENBQUMsU0FBUyxDQUFFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUM7SUFDckMsQ0FBQztJQUVNLFFBQVEsQ0FBRSxLQUFTLEVBQUUsR0FBYztRQUV6QyxJQUFJLENBQUMsU0FBUyxDQUFFLENBQUUsS0FBSyxDQUFFLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVNLFdBQVcsQ0FBRSxLQUFRO1FBRTNCLElBQUksS0FBSyxDQUFFLEtBQUssQ0FBRSxJQUFJLElBQUk7WUFBRyxPQUFPO1FBQ3BDLElBQUksQ0FBQyxZQUFZLENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFFLENBQUM7SUFDdkMsQ0FBQztJQUVNLFNBQVMsQ0FBRSxNQUFZLEVBQUUsS0FBZ0I7UUFFL0MsSUFBSSxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUM7WUFBRyxPQUFPLElBQUksQ0FBQztRQUVyQyxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFJLE1BQU0sQ0FBRSxDQUFDO1FBRWpDLE1BQU0sQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUUsS0FBSyxDQUFFLEdBQUcsSUFBSSxDQUFFLENBQUM7UUFFakQsSUFBSSxDQUFDLE9BQU8sQ0FBRSxVQUFVLENBQUUsQ0FBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLENBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFHLENBQUM7UUFFN0QsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRU0sWUFBWSxDQUFFLEtBQWMsRUFBRSxLQUFnQjtRQUVwRCxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxLQUFLO1lBQUksT0FBTztRQUVoRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFFLEtBQUssRUFBRSxLQUFLLENBQUUsQ0FBQztRQUV6QyxJQUFJLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBRSxHQUFHLElBQUksQ0FBRSxDQUFDO1FBRTNDLElBQUksQ0FBQyxPQUFPLENBQUUsVUFBVSxDQUFFLENBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxDQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUcsQ0FBQztJQUNsRSxDQUFDO0lBRU0sS0FBSztRQUVYLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUcsQ0FBRSxHQUFHLEVBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFFLENBQUcsQ0FBQztRQUN6RCxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsT0FBTyxDQUFFLFVBQVUsQ0FBRSxDQUFFLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFFLENBQUM7SUFDakQsQ0FBQztJQUVELE1BQU07SUFFSSxPQUFPLENBQUUsS0FBYyxFQUFFLElBQWE7UUFFL0MsS0FBSyxJQUFJLEdBQUcsR0FBRyxLQUFLLEVBQUUsR0FBRyxHQUFHLElBQUksSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUcsRUFDN0Q7WUFDQyxJQUFJLENBQUUsR0FBRyxDQUFFLENBQUMsR0FBRyxDQUFFLFVBQVUs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