/*
    [ class Lian ]

    要素の順序・構成の変更通知が得られるArray。

    DOMエレメントのchildNodesの動的な構成変更を実現するために、モデルとして使用。
*/
import { Leaf, setRoValue } from "./leaf.js";
const log = console.log;
/** owner : symbol  OederがLianを保持するために使用。 */
const owner = Symbol();
const readonlykey = {};
/** class Lian */
export class Lian extends Array {
    vlength = new Leaf.Ro.Number(0, { readonlykey });
    refs = new Set();
    _array = this;
    //  //
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this._array.length);
    }
    // order life methods //
    insert(create, count) {
        const ords = [];
        for (let i = 0; i < count; i++)
            ords.push(create());
        this.addOrders(ords, this._array.length);
    }
    addOrder(order, pos) {
        this.addOrders([order], pos);
    }
    removeOrder(order) {
        if (order[owner] != this)
            return;
        this.removeOrders(order.pos.val, 1);
    }
    addOrders(orders, start) {
        if (orders.length == 0)
            return this;
        const st = regnext(this, start);
        this._array.splice(st, 0, ...orders);
        orders.forEach(order => order[owner] = this);
        this.vlength[setRoValue](readonlykey, this.length);
        this.reposit(st, this._array.length);
        this.refs.forEach(ref => ref.add?.(st, orders.length));
        return this;
    }
    removeOrders(start, count) {
        if (start < 0 || this._array.length <= start)
            return;
        const rems = this._array.splice(start, count);
        rems.forEach(rem => rem[owner] = null);
        this.vlength[setRoValue](readonlykey, this._array.length);
        this.reposit(start);
        this.refs.forEach(ref => ref.remove?.(start, rems.length));
    }
    clear() {
        const len = this._array.length;
        this.refs.forEach((ref) => ref.remove?.(0, len));
        this._array.length = 0;
        this.vlength[setRoValue](readonlykey, this._array.length);
    }
    //  //
    reposit(start, next = this._array.length) {
        next = Math.min(next, this._array.length);
        for (let pos = start; pos < next; pos++) {
            this._array[pos].pos[setRoValue](readonlykey, pos);
        }
    }
    //  //
    terminate() {
        this.clear();
        this.refs.clear();
    }
}
export class Order {
    [owner] = null;
    pos;
    constructor() {
        this.pos = new Leaf.Ro.Number(-1, { readonlykey });
    }
    remove() { log("remove", this.pos.v); this[owner]?.removeOrder(this); }
    terminate() {
        this.remove();
        this[owner] = null;
    }
}
const regnext = (ar, pos) => {
    if (pos == undefined || pos > ar.length)
        return ar.length;
    if (pos < 0)
        return 0;
    return pos;
};
//   //
export class LianV extends Lian {
    static create(values) {
        return new LianV().addValues(values);
    }
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    //  //
    addValues(values, start) {
        const orders = values.map(value => new OrderV(value));
        this.addOrders(orders, start);
        return this;
    }
    addValue(value, position) {
        const o = new OrderV(value);
        this.addOrder(o, position);
    }
}
export class OrderV extends Order {
    value;
    constructor(value) {
        super();
        this.value = value;
    }
    get v() { return this.value; }
    get val() { return this.value; }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGlhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUFFRixPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU3QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLDRDQUE0QztBQUU1QyxNQUFNLEtBQUssR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUN2QixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFHdkIsaUJBQWlCO0FBRWpCLE1BQU0sT0FBTyxJQUErQixTQUFRLEtBQVc7SUFFOUMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUUsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLENBQUUsQ0FBQztJQUN6RCxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFDL0IsTUFBTSxHQUFHLElBQUksQ0FBQztJQUV4QixNQUFNO0lBRUMsR0FBRyxDQUFFLEdBQWM7UUFFekIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxDQUFFLENBQUM7UUFDckIsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCx3QkFBd0I7SUFFakIsTUFBTSxDQUFFLE1BQWdCLEVBQUUsS0FBYztRQUU5QyxNQUFNLElBQUksR0FBRyxFQUFFLENBQUM7UUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUc7WUFBSSxJQUFJLENBQUMsSUFBSSxDQUFFLE1BQU0sRUFBRSxDQUFFLENBQUM7UUFDekQsSUFBSSxDQUFDLFNBQVMsQ0FBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1B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