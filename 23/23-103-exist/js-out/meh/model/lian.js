/*
    [ class Lian ]

    要素の順序・構成の変更通知が得られるArray。

    DOMエレメントのchildNodesの動的な構成変更を実現するために、モデルとして使用。
*/
import { Leaf, setRoValue } from "./leaf.js";
const log = console.log;
export class Lian extends Array {
    vlength = new Leaf.Ro.Number(0, { owner: this });
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    // order operations //
    addOrders(orders, start) {
        const st = regnext(this, start);
        this.splice(st, 0, ...orders);
        this.vlength[setRoValue](this, this.length);
        this.reposit(st, this.length);
        this.refs.forEach(ref => ref.add?.(st, orders.length));
        return this;
    }
    addOrder(order, position) {
        const pos = regnext(this, position);
        this.splice(pos, 0, order);
        this.vlength[setRoValue](this, this.length);
        this.reposit(pos, this.length);
        this.refs.forEach(ref => ref.add?.(pos, 1));
    }
    remove(order) {
        if (order.owner != this)
            return;
        const pos = order.pos.v;
        if (pos < 0 || this.length <= pos)
            return;
        if (order != this[pos])
            return;
        this.splice(pos, 1);
        this.vlength[setRoValue](this, this.length);
        this.reposit(pos, this.length);
        this.refs.forEach(ref => ref.remove?.(pos, 1));
    }
    clear() {
        const len = this.length;
        this.refs.forEach((ref) => ref.remove?.(0, len));
        this.length = 0;
        this.vlength[setRoValue](this, this.length);
    }
    //  //
    reposit(start, next) {
        for (let pos = start; pos < next; pos++) {
            this[pos].pos[setRoValue](this, pos);
        }
    }
    //  //
    terminate() {
        this.clear();
        this.refs.clear();
    }
}
export class Order {
    owner;
    pos;
    constructor(owner) {
        this.owner = owner;
        this.pos = new Leaf.Ro.Number(-1, { owner });
    }
    remove() { this.owner?.remove(this); }
    terminate() {
    }
}
const regnext = (ar, order) => {
    if (order == undefined || order > ar.length || order < 0)
        return ar.length;
    return order;
};
//   //
export class ValueLian extends Lian {
    static create(items) {
        return new ValueLian().addValues(items);
    }
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    //  //
    addValues(values, start) {
        this.addOrders(values.map(val => this.createOrder(val)), start);
        return this;
    }
    createOrder(value) {
        return new ValueOrder(this, value);
    }
    add(value, position) {
        const o = new ValueOrder(this, value);
        this.addOrder(o, position);
    }
}
export class ValueOrder extends Order {
    value;
    constructor(owner, value) {
        super(owner);
        this.value = value;
    }
    get v() { return this.value; }
    get val() { return this.value; }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGlhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUFFRixPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU3QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLE1BQU0sT0FBTyxJQUFpQyxTQUFRLEtBQVc7SUFFaEQsT0FBTyxHQUFHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFFLENBQUM7SUFDekQsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO0lBRWxDLEdBQUcsQ0FBRSxHQUFjO1FBRXpCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxzQkFBc0I7SUFFZixTQUFTLENBQUUsTUFBWSxFQUFFLEtBQWdCO1FBRS9DLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBRSxJQUFJLEVBQUUsS0FBSyxDQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUksTUFBTSxDQUFFLENBQUM7UUFFakMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxVQUFVLENBQUUsQ0FBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLENBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBRyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcs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