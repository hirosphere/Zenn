import { Leaf, Index } from "./index.js";
const log = console.log;
/** class Select */
export class Select {
    current;
    get root() { return this._root; }
    get default() { return this._default; }
    constructor(optarg, defaultDef) {
        this.current = new Leaf(null, { rel: this.update });
        this._root = this.createOption(optarg);
        this._default = defaultDef ? this.createOption(defaultDef) : null;
    }
    _root;
    _default;
    //
    createOption(def) {
        return new Option(this, undefined, def);
    }
    //
    setCurrent(option) {
        this.current.val = option || this._default;
    }
    update(newitem, olditem) {
        olditem?.selected.set(false);
        newitem?.selected.set(true);
    }
}
(function (Select) {
    Select.fromLabels = (labels, deflab) => {
        const def = { title: "", value: "", parts: labels.map(value => ({ title: value, value })) };
        return new Select(def, { title: deflab ?? "", value: "" });
    };
    Select.fromValues = (arg) => {
        return new Select(arg);
    };
})(Select || (Select = {}));
/** class Option */
export class Option extends Index {
    selector;
    args;
    get v() { return this.value; }
    get val() { return this.value; }
    value;
    selected = new Leaf.Boolean(false);
    constructor(selector, orderOwner, args) {
        super();
        this.selector = selector;
        this.args = args;
        this._title = args.title;
        this.value = args.value;
        args.parts && this.parts.addOrders(args.parts.map(def => this.createPart(def)));
    }
    createPart(def) {
        return new Option(this.selector, this.parts, def);
    }
    //
    select() {
        this.selector?.setCurrent(this);
    }
    terminate() {
        this.selector = null;
        super.terminate();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdHMtc3JjL21laC9tb2RlbC9zZWxlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBeUIsS0FBSyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ2hFLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFeEIsbUJBQW1CO0FBRW5CLE1BQU0sT0FBTyxNQUFNO0lBRUYsT0FBTyxDQUEyQjtJQUNsRCxJQUFXLElBQUksS0FBb0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN2RCxJQUFXLE9BQU8sS0FBMkIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUVwRSxZQUFhLE1BQTBCLEVBQUUsVUFBZ0M7UUFFeEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLElBQUksQ0FBMkIsSUFBSSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBRSxDQUFDO1FBQy9FLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBRSxNQUFNLENBQUUsQ0FBQztRQUN6QyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBRSxVQUFVLENBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3JFLENBQUM7SUFFUyxLQUFLLENBQWlCO0lBQ3RCLFFBQVEsQ0FBdUI7SUFFekMsRUFBRTtJQUVLLFlBQVksQ0FBRSxHQUF1QjtRQUUzQyxPQUFPLElBQUksTUFBTSxDQUFTLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELEVBQUU7SUFFSyxVQUFVLENBQUUsTUFBNEI7UUFFOUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxR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