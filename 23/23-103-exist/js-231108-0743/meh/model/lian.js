/*
    [ class Lian ]

    要素の順序・構成の変更通知が得られるArray。

    DOMエレメントのchildNodesの動的な構成変更を実現するために、モデルとして使用。
*/
import { Leaf, setRoValue } from "./leaf.js";
const log = console.log;
export class LianBase extends Array {
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    // order operations //
    addOrders(orders, start) {
        const st = regnext(this, start);
        this.splice(st, 0, ...orders);
        this.reposit(st, this.length);
        this.refs.forEach(ref => ref.add?.(st, orders.length));
        return this;
    }
    addOrder(order, position) {
        const pos = regnext(this, position);
        this.splice(pos, 0, order);
        this.reposit(pos, this.length);
        this.refs.forEach(ref => ref.add?.(pos, 1));
    }
    remove(order) {
        if (order.owner != this)
            return;
        const pos = order.pos.v;
        if (pos < 0 || this.length <= pos)
            return;
        if (order != this[pos])
            return;
        this.splice(pos, 1);
        this.reposit(pos, this.length);
        this.refs.forEach(ref => ref.remove?.(pos, 1));
    }
    clear() {
        const len = this.length;
        this.refs.forEach((ref) => ref.remove?.(0, len));
        this.length = 0;
    }
    //  //
    reposit(start, next) {
        for (let pos = start; pos < next; pos++) {
            this[pos].pos[setRoValue](this, pos);
        }
    }
    //  //
    terminate() {
        this.clear();
        this.refs.clear();
    }
}
export class OrderBase {
    owner;
    pos;
    constructor(owner) {
        this.owner = owner;
        this.pos = new Leaf.Ro.Number(-1, { owner });
    }
    remove() { this.owner.remove(this); }
    terminate() {
    }
}
const regnext = (ar, order) => {
    if (order == undefined || order > ar.length || order < 0)
        return ar.length;
    return order;
};
//   //
export class Lian extends LianBase {
    static create(items) {
        return new Lian().addValues(items);
    }
    refs = new Set();
    ref(ref) {
        this.refs.add(ref);
        ref.add?.(0, this.length);
    }
    //  //
    addValues(values, start) {
        this.addOrders(values.map(val => this.createOrder(val)), start);
        return this;
    }
    createOrder(value) {
        return new Order(this, value);
    }
    // order operations //
    add(value, position) {
        const o = new Order(this, value);
        this.addOrder(o, position);
    }
    remove(order) {
        if (order.owner != this)
            return;
        const pos = order.pos.v;
        if (pos < 0 || this.length <= pos)
            return;
        if (order != this[pos])
            return;
        this.splice(pos, 1);
        this.reposit(pos, this.length);
        this.refs.forEach(ref => ref.remove?.(pos, 1));
    }
    clear() {
        const len = this.length;
        this.refs.forEach((ref) => ref.remove?.(0, len));
        this.length = 0;
    }
    //  //
    reposit(start, next) {
        for (let ord = start; ord < next; ord++) {
            this[ord].pos[setRoValue](this, ord);
        }
    }
}
export class Order extends OrderBase {
    value;
    constructor(owner, value) {
        super(owner);
        this.value = value;
    }
    get v() { return this.value; }
    get val() { return this.value; }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGlhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUFFRixPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU3QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLE1BQU0sT0FBTyxRQUE2QyxTQUFRLEtBQVc7SUFFbEUsSUFBSSxHQUFHLElBQUksR0FBRyxFQUFnQixDQUFDO0lBRWxDLEdBQUcsQ0FBRSxHQUFjO1FBRXpCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxzQkFBc0I7SUFFZixTQUFTLENBQUUsTUFBWSxFQUFFLEtBQWdCO1FBRS9DLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBRSxJQUFJLEVBQUUsS0FBSyxDQUFFLENBQUM7UUFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEdBQUksTUFBTSxDQUFFLENBQUM7UUFFakMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxFQUFFLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQ2hDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFFLENBQUcsQ0FBQztRQUU3RCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFTSxRQUFRLENBQUUsS0FBUyxFQUFFLFFBQW1CO1FBRTlDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBRSxJQUFJLEVBQUUsUUFBUSxDQUFF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