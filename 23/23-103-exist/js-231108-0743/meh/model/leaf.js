const log = console.log;
export class StringSource {
}
export const setRoValue = Symbol();
class LeafRo extends StringSource {
    _value;
    rel;
    refs = new Set;
    constructor(value, args) {
        super();
        this._value = value;
        this.rel = args?.rel;
    }
    // ref //
    strconv(toref) {
        return new ConvStrSrc(this, toref);
    }
    toString() { return String(this._value); }
    ref(update) {
        const ref = new RefImpl(this, update);
        this.refs.add(ref);
        return ref;
    }
    removeref(ref) {
        this.refs.delete(ref);
    }
    // value //
    get v() { return this._value; }
    get val() { return this._value; }
    get value() { return this._value; }
    get() { return this._value; }
    [setRoValue](value, sender) {
        if (value === this._value)
            return;
        const old = this._value;
        this._value = value;
        this.rel?.();
        this.refs.forEach(ref => ref.update(value, old));
    }
    // life //
    delete() {
        this.refs.forEach(ref => ref.release());
        delete this.rel;
    }
}
export class Leaf extends LeafRo {
    get v() { return this._value; }
    get val() { return this._value; }
    get value() { return this._value; }
    set v(value) { this[setRoValue](value); }
    set val(value) { this[setRoValue](value); }
    set value(value) { this[setRoValue](value); }
    set(value, sender) { this[setRoValue](value, sender); }
}
(function (Leaf_1) {
    class String extends Leaf {
    }
    Leaf_1.String = String;
    ;
    class Number extends Leaf {
    }
    Leaf_1.Number = Number;
    ;
    class Boolean extends Leaf {
    }
    Leaf_1.Boolean = Boolean;
    ;
    // Readonly //
    let Ro;
    (function (Ro) {
        Ro.Leaf = LeafRo;
        class String extends LeafRo {
        }
        Ro.String = String;
        ;
        class Number extends LeafRo {
        }
        Ro.Number = Number;
        ;
        class Boolean extends LeafRo {
        }
        Ro.Boolean = Boolean;
        ;
    })(Ro = Leaf_1.Ro || (Leaf_1.Ro = {}));
})(Leaf || (Leaf = {}));
//  //
class RefImpl {
    source;
    _update;
    constructor(source, _update) {
        this.source = source;
        this._update = _update;
        this.source && this._update?.(this.source.value);
    }
    update(value, old) {
        this._update?.(value, old);
    }
    release() {
        if (this.source == null)
            return;
        this.source.removeref(this);
        this.source = null;
        this._update = null;
    }
}
class ConvStrSrc extends StringSource {
    source;
    toref;
    constructor(source, toref) {
        super();
        this.source = source;
        this.toref = toref;
    }
    ref(update) { return this.source.ref(update); }
    toString() { return this.toref(this.source.value); }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGVhZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBV3hCLE1BQU0sT0FBZ0IsWUFBWTtDQUlqQztBQUVELE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUVuQyxNQUFNLE1BQWEsU0FBUSxZQUFZO0lBRTVCLE1BQU0sQ0FBSztJQUNYLEdBQUcsQ0FBaUI7SUFDcEIsSUFBSSxHQUFHLElBQUksR0FBcUIsQ0FBRTtJQUU1QyxZQUFhLEtBQVMsRUFBRSxJQUF1QjtRQUU5QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsQ0FBQztJQUN0QixDQUFDO0lBRUQsU0FBUztJQUVGLE9BQU8sQ0FBRSxLQUErQjtRQUU5QyxPQUFPLElBQUksVUFBVSxDQUFTLElBQUksRUFBRSxLQUFLLENBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRU0sUUFBUSxLQUFLLE9BQU8sTUFBTSxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFFNUMsR0FBRyxDQUFFLE1BQXFCO1FBRWhDLE1BQU0sR0FBRyxHQUFHLElBQUksT0FBTyxDQUFTLElBQUksRUFBRSxNQUFNLENBQUUsQ0FBQztRQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUUsQ0FBQztRQUNyQixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7SUFFTSxTQUFTLENBQUUsR0FBbUI7UUFFcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUUsR0FBRyxDQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELFdBQVc7SUFFWCxJQUFXLENBQUMsS0FBSyxPQUFP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