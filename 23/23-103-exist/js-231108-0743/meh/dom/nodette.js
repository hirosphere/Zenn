/*
    [ class Nodette ]

    ひとつのDOMノード( Element, Text )のライフを管理。
    ・DOMノードとデータオブジェクト(Leaf)の結びつけと解放。
    ・対象DOMノードのコンテナエレメントへの結びつけと解放。
*/
import { Leaf, StringSource } from "../model/leaf.js";
import { Parts as Parts } from "./parts.js";
const log = console.log;
class Refs extends Set {
}
//
export class Nodette {
    node;
    element = null;
    parts;
    refs = new Refs;
    constructor(def, ce, nextNode) {
        if (typeof def == "object" && "isElement" in def)
            this.createElement(def, ce, nextNode);
        else
            this.createText(def, ce, nextNode);
    }
    createElement(def, ce, nextNode) {
        const e = document.createElement(def.type);
        this.node = this.element = e;
        if (def.class)
            this.bindClass(e, def.class);
        if (def.props)
            this.bindProps(e, def.props);
        if (def.attrs)
            this.bindAttrs(e, def.attrs);
        if (def.style)
            this.bindStyle(e, def.style);
        if (def.acts)
            this.bindActs(e, def.acts);
        if (def.actActs)
            this.bindActs(e, def.actActs, { passive: false });
        if (def.optActs)
            this.bindOptActs(e, def.optActs);
        if (def.parts)
            this.parts = Parts.create(this, def.parts);
        if (ce)
            ce.insertBefore(e, nextNode || null);
        return e;
    }
    createText(def, ce, nextNode) {
        const node = document.createTextNode("");
        bindText(node, "nodeValue", def, this.refs);
        if (ce)
            ce.insertBefore(node, nextNode || null);
        this.node = node;
        return node;
    }
    // bind opers //
    bindClass(e, def) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(e, subdef);
            return;
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bindText(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindProps(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e, name, value, this.refs);
        }
    }
    bindAttrs(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindAttr(e, name, value, this.refs);
        }
    }
    bindStyle(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e.style, name, value || "", this.refs);
        }
    }
    bindActs(e, def, opt) {
        for (const [name, act] of Object.entries(def)) {
            e.addEventListener(name, act, opt);
        }
    }
    bindOptActs(e, def) {
        for (const [name, actdef] of Object.entries(def)) {
            const [act, opt] = actdef;
            e.addEventListener(name, act, opt);
        }
    }
    //  //
    delete() {
        this.node?.parentElement?.removeChild(this.node);
        this.parts?.delete();
        this.refs.forEach(ref => ref.release());
        this.refs.clear();
    }
}
// binds //
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref((value) => e.classList.toggle(name, value)));
    }
    else
        e.classList.toggle(name, value);
};
const bindAttr = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref(() => setAttr(e, name, value.get())));
    }
    else if (value instanceof StringSource) {
        refs.add(value.ref(() => setAttr(e, name, value.toString())));
    }
    else
        setAttr(e, name, value);
};
const setAttr = (e, name, value) => {
    if (typeof value == "boolean") {
        value ? e.setAttribute(name, "") : e.removeAttribute(name);
    }
    else {
        e.setAttribute(name, String(value));
    }
};
const bindText = (target, name, text, refs) => {
    if (text instanceof StringSource) {
        refs.add(text.ref(() => { target[name] = text.toString(); }));
    }
    else
        target[name] = text;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvZG9tL25vZGV0dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztFQU1FO0FBR0YsT0FBTyxFQUFFLElBQUksRUFBWSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVoRSxPQUFPLEVBQUUsS0FBSyxJQUFJLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUU1QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLE1BQU0sSUFBSyxTQUFRLEdBQVc7Q0FBRztBQUVqQyxFQUFFO0FBRUYsTUFBTSxPQUFPLE9BQU87SUFFWixJQUFJLENBQVU7SUFDZCxPQUFPLEdBQW9CLElBQUksQ0FBQztJQUMvQixLQUFLLENBQVc7SUFDaEIsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDO0lBRXhCLFlBQWEsR0FBZSxFQUFFLEVBQW1CLEVBQUUsUUFBaUI7UUFFbkUsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLElBQUksV0FBVyxJQUFJLEdBQUc7WUFBSSxJQUFJLENBQUMsYUFBYSxDQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFFLENBQUM7O1lBQ3RGLElBQUksQ0FBQyxVQUFVLENBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRU8sYUFBYSxDQUFFLEdBQWtCLEVBQUUsRUFBbUIsRUFBRSxRQUFpQjtRQUVoRixNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRTdCLElBQUksR0FBRyxDQUFDLEtBQUs7WUFBRyxJQUFJLENBQUMsU0FBUyxDQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFFLENB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