/*
    [ class Nodette ]

    ひとつのDOMノード( Element, Text )のライフを管理。
    ・DOMノードとデータオブジェクト(Leaf)の結びつけと解放。
    ・対象DOMノードのコンテナエレメントへの結びつけと解放。
*/
import { Leaf, StringSource } from "../model/leaf.js";
import { Parts as Parts } from "./parts.js";
const log = console.log;
class Refs extends Set {
}
//
export class Nodette {
    node;
    element = null;
    parts;
    refs = new Refs;
    hook;
    constructor(def, ce, nextNode) {
        if (typeof def == "object" && "isElement" in def)
            this.createElement(def, ce, nextNode);
        else
            this.createText(def, ce, nextNode);
        this.hook?.init();
    }
    createElement(def, ce, nextNode) {
        const e = document.createElement(def.type);
        this.node = this.element = e;
        if (def.class)
            this.bindClass(e, def.class);
        if (def.attrs)
            this.bindAttrs(e, def.attrs);
        if (def.props)
            this.bindProps(e, def.props);
        if (def.style)
            this.bindStyle(e, def.style);
        if (def.acts)
            this.bindActs(e, def.acts);
        if (def.actActs)
            this.bindActs(e, def.actActs, { passive: false });
        if (def.optActs)
            this.bindOptActs(e, def.optActs);
        if (def.hook) {
            def.hook[hook_e] = e;
            this.hook = def.hook;
        }
        ;
        if (def.parts)
            this.parts = Parts.create(this, def.parts);
        if (ce)
            ce.insertBefore(e, nextNode || null);
        return e;
    }
    createText(def, ce, nextNode) {
        const node = document.createTextNode("");
        bindText(node, "nodeValue", def, this.refs);
        if (ce)
            ce.insertBefore(node, nextNode || null);
        this.node = node;
        return node;
    }
    // bind opers //
    bindClass(e, def) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(e, subdef);
            return;
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bindText(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindProps(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e, name, value, this.refs);
        }
    }
    bindAttrs(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindAttr(e, name, value, this.refs);
        }
    }
    bindStyle(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e.style, name, value || "", this.refs);
        }
    }
    bindActs(e, def, opt) {
        for (const [name, act] of Object.entries(def)) {
            e.addEventListener(name, act, opt);
        }
    }
    bindOptActs(e, def) {
        for (const [name, actdef] of Object.entries(def)) {
            const [act, opt] = actdef;
            e.addEventListener(name, act, opt);
        }
    }
    //  //
    delete() {
        this.node?.parentElement?.removeChild(this.node);
        this.parts?.delete();
        this.refs.forEach(ref => ref.release());
        this.refs.clear();
    }
}
// binds //
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.createRef((value) => e.classList.toggle(name, value)));
    }
    else
        e.classList.toggle(name, value);
};
const bindAttr = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.createRef(() => setAttr(e, name, value.get())));
    }
    else if (value instanceof StringSource) {
        refs.add(value.createRef(() => setAttr(e, name, value.toString())));
    }
    else
        setAttr(e, name, value);
};
const setAttr = (e, name, value) => {
    if (typeof value == "boolean") {
        value ? e.setAttribute(name, "true") : e.removeAttribute(name);
    }
    else {
        e.setAttribute(name, String(value));
    }
};
const bindText = (target, name, value, refs) => {
    if (value instanceof StringSource) {
        refs.add(value.createRef(() => { target[name] = value; }));
    }
    else
        target[name] = value;
};
/** hook */
export const newhook = () => {
    return new Hook();
};
const hook_e = Symbol();
export class Hook {
    get e() { return this[hook_e]; }
    ;
    [hook_e] = null;
    init() { }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZXR0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvZG9tL25vZGV0dGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztFQU1FO0FBR0YsT0FBTyxFQUFFLElBQUksRUFBWSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVoRSxPQUFPLEVBQUUsS0FBSyxJQUFJLEtBQUssRUFBRSxNQUFNLFlBQVksQ0FBQztBQUU1QyxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBRXhCLE1BQU0sSUFBSyxTQUFRLEdBQVc7Q0FBRztBQUVqQyxFQUFFO0FBRUYsTUFBTSxPQUFPLE9BQU87SUFFWixJQUFJLENBQVU7SUFDZCxPQUFPLEdBQW9CLElBQUksQ0FBQztJQUMvQixLQUFLLENBQVc7SUFDaEIsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDO0lBQ2hCLElBQUksQ0FBVTtJQUV0QixZQUFhLEdBQWUsRUFBRSxFQUFtQixFQUFFLFFBQWlCO1FBRW5FLElBQUksT0FBTyxHQUFHLElBQUksUUFBUSxJQUFJLFdBQVcsSUFBSSxHQUFHO1lBQUksSUFBSSxDQUFDLGFBQWEsQ0FBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBRSxDQUFDOztZQUN0RixJQUFJLENBQUMsVUFBVSxDQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFFLENBQUM7UUFFM0MsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRU8sYUFBYSxDQUFFLEdBQWtCLEVBQUUsRUFBbUIsRUFBRSxRQUFpQjtRQUVoRixNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUM3QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRTdCLElBQUksR0FBRyxDQUFDLEtBQUs7WUFBRyxJQUFJLENBQUMsU0FBUyxDQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFFLENBQUM7UUFDaEQsSUFBSSxHQUFHLENBQUMsS0FBSztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUUsQ0FBQztRQUMvQyxJQUFJLEdBQUcsQ0FBQyxLQUFLO1lBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBRSxDQUFDO1FBQy9DLElBQUksR0FBRyxDQUFDLEtBQUs7WUFBRyxJQUFJLENBQUMsU0FBUyxDQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFFLENBQUM7UUFDL0MsSUFBSSxHQUFHLENBQUMsSUFBSTtZQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUM1QyxJQUFJLEdBQUcsQ0FBQyxPQUFPO1lBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBRSxDQUFDO1FBQ3RFLElBQUksR0FBRyxDQUFDLE9BQU87WUFBRyxJQUFJLENBQUMsV0FBVyxDQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFFLENBQUM7UUFDckQsSUFBSSxHQUFHLENBQUMsSUFBSSxFQUNaO1lBQ0MsR0FBRyxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUUsR0FBRyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1NBQ3JCO1FBQUEsQ0FBQztRQUVGLElBQUksR0FBRyxDQUFDLEtBQUs7WUFBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUUsQ0FBQztRQUU3RCxJQUFJLEVBQUU7WUFBRyxFQUFFLENBQUMsWUFBWSxDQUFFLENBQUMsRUFBRSxRQUFRLElBQUksSUFBSSxDQUFFLENBQUM7UUFFaEQsT0FBTyxDQUFDLENBQUM7SUFDVixDQUFDO0lBRU8sVUFBVSxDQUFFLEdBQWUsRUFBRSxFQUFtQixFQUFFLFFBQWlCO1FBRTFFLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUUsRUFBRSxDQUFFLENBQUM7UUFDM0MsUUFBUSxDQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUU5QyxJQUFJLEVBQUU7WUFBSSxFQUFFLENBQUMsWUFBWSxDQUFFLElBQUksRUFBRSxRQUFRLElBQUksSUFBSSxDQUFFLENBQUM7UUFFcEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsZ0JBQWdCO0lBRVIsU0FBUyxDQUFHLENBQVcsRUFBRSxHQUFnQjtRQUVoRCxJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUc7WUFDMUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxHQUFHO2dCQUFJLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBRSxDQUFDO1lBQ3hELE9BQU87U0FDUDtRQUVELElBQUksT0FBTyxHQUFHLElBQUksUUFBUSxJQUFJLEdBQUcsWUFBWSxJQUFJLEVBQUc7WUFDbkQsUUFBUSxDQUFFLENBQUMsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztTQUMzQzthQUVJLElBQUksT0FBTyxHQUFHLElBQUksUUFBUSxFQUFHO1lBQ2pDLEtBQUssTUFBTSxDQUFFLElBQUksRUFBRSxLQUFLLENBQUUsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxFQUFHO2dCQUNyRCxTQUFTLENBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO2FBQ3ZDO1NBQ0Q7SUFDRixDQUFDO0lBRU8sU0FBUyxDQUFHLENBQVcsRUFBRSxHQUE0QjtRQUU1RCxLQUFLLE1BQU0sQ0FBRSxJQUFJLEVBQUUsS0FBSyxDQUFFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUUsRUFBRztZQUNyRCxRQUFRLENBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO1NBQ3RDO0lBQ0YsQ0FBQztJQUVPLFNBQVMsQ0FBRyxDQUFXLEVBQUUsR0FBZ0I7UUFFaEQsS0FBSyxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLEVBQUc7WUFDckQsUUFBUSxDQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztTQUN0QztJQUNGLENBQUM7SUFFTyxTQUFTLENBQUcsQ0FBZSxFQUFFLEdBQWdCO1FBRXBELEtBQUssTUFBTSxDQUFFLElBQUksRUFBRSxLQUFLLENBQUUsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxFQUFHO1lBQ3JELFFBQVEsQ0FBRSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztTQUNsRDtJQUNGLENBQUM7SUFFTyxRQUFRLENBQUcsQ0FBVyxFQUFFLEdBQWtCLEVBQUUsR0FBK0I7UUFFbEYsS0FBSyxNQUFNLENBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLEVBQUc7WUFDbkQsQ0FBQyxDQUFDLGdCQUFnQixDQUFFLElBQUksRUFBRSxHQUFvQixFQUFFLEdBQUcsQ0FBRSxDQUFDO1NBQ3REO0lBQ0YsQ0FBQztJQUVPLFdBQVcsQ0FBRyxDQUFXLEVBQUUsR0FBcUI7UUFFdkQsS0FBSyxNQUFNLENBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLEVBQUc7WUFDdEQsTUFBTSxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsR0FBRyxNQUFNLENBQUM7WUFDNUIsQ0FBQyxDQUFDLGdCQUFnQixDQUFFLElBQUksRUFBRSxHQUFvQixFQUFFLEdBQUcsQ0FBRSxDQUFDO1NBQ3REO0lBQ0YsQ0FBQztJQUVELE1BQU07SUFFQyxNQUFNO1FBRVosSUFBSSxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsV0FBVyxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztRQUVuRCxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFFLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNuQixDQUFDO0NBQ0Q7QUFFRCxXQUFXO0FBRVgsTUFBTSxTQUFTLEdBQUcsQ0FBRSxDQUFXLEVBQUUsSUFBYSxFQUFFLEtBQW1CLEVBQUUsSUFBVyxFQUFHLEVBQUU7SUFFcEYsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFHO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBRSxDQUFFLEtBQUssRUFBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFFLENBQUUsQ0FBQztLQUM5RTs7UUFDSyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxJQUFJLEVBQUUsS0FBSyxDQUFFLENBQUM7QUFDekMsQ0FBQyxDQUFBO0FBR0QsTUFBTSxRQUFRLEdBQUcsQ0FBRSxDQUFXLEVBQUUsSUFBYSxFQUFFLEtBQWlCLEVBQUUsSUFBVyxFQUFHLEVBQUU7SUFFakYsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFHO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUUsQ0FBRSxDQUFFLENBQUM7S0FDckU7U0FDSSxJQUFJLEtBQUssWUFBWSxZQUFZLEVBQUc7UUFDeEMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxLQUFLLENBQUMsU0FBUyxDQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBRSxDQUFFLENBQUUsQ0FBQztLQUMxRTs7UUFDSSxPQUFPLENBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUUsQ0FBQztBQUNoQyxDQUFDLENBQUM7QUFFRixNQUFNLE9BQU8sR0FBRyxDQUFFLENBQVcsRUFBRSxJQUFhLEVBQUUsS0FBaUMsRUFBRyxFQUFFO0lBRW5GLElBQUksT0FBTyxLQUFLLElBQUksU0FBUyxFQUFHO1FBQy9CLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBRSxJQUFJLEVBQUUsTUFBTSxDQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUUsSUFBSSxDQUFFLENBQUM7S0FDbkU7U0FDRztRQUNILENBQUMsQ0FBQyxZQUFZLENBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBRSxLQUFLLENBQUUsQ0FBRSxDQUFDO0tBQ3hDO0FBQ0YsQ0FBQyxDQUFBO0FBRUQsTUFBTSxRQUFRLEdBQUcsQ0FBRSxNQUE4QixFQUFFLElBQVksRUFBRSxLQUFnQixFQUFFLElBQVUsRUFBRyxFQUFFO0lBRWpHLElBQUksS0FBSyxZQUFZLFlBQVksRUFBRztRQUNuQyxJQUFJLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBQyxTQUFTLENBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFFLElBQUksQ0FBRSxHQUFHLEtBQUssQ0FBQSxDQUFDLENBQUMsQ0FBRSxDQUFFLENBQUM7S0FDaEU7O1FBQ0ssTUFBTSxDQUFFLElBQUksQ0FBRSxHQUFHLEtBQUssQ0FBQztBQUM5QixDQUFDLENBQUM7QUFHRixXQUFXO0FBRVgsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEdBQVUsRUFBRTtJQUVsQyxPQUFPLElBQUksSUFBSSxFQUFFLENBQUM7QUFDbkIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxFQUFFLENBQUM7QUFFeEIsTUFBTSxPQUFPLElBQUk7SUFFaEIsSUFBVyxDQUFDLEtBQXNCLE9BQU8sSUFBSSxDQUFFLE1BQU0sQ0FBRSxDQUFDLENBQUMsQ0FBQztJQUFBLENBQUM7SUFDcEQsQ0FBRSxNQUFNLENBQUUsR0FBb0IsSUFBSSxDQUFDO0lBQ25DLElBQUksS0FBSSxDQUFDO0NBQ2hCIn0=