const log = console.log;
export const iss = (value) => (typeof value == "string");
export const isn = (value) => (typeof value == "number");
export const isb = (value) => (typeof value == "boolean");
export class ToString {
}
export class Leaf extends ToString {
    _value;
    rel;
    refs = new Set;
    constructor(value, args) {
        super();
        this._value = value;
        this.rel = args?.rel;
    }
    // ref //
    strconv(toref) {
        return new ToStringTemplate(this, toref);
    }
    toString() { return String(this._value); }
    ref(update) {
        const ref = new RefImpl(this, update);
        this.refs.add(ref);
        return ref;
    }
    removeref(ref) {
        this.refs.delete(ref);
    }
    // value //
    get value() { return this._value; }
    set value(value) { this.set(value); }
    get() { return this._value; }
    set(value, sender) {
        if (value === this._value)
            return;
        const old = this._value;
        this._value = value;
        this.rel?.();
        this.refs.forEach(ref => ref.update(value, old));
    }
    // life //
    delete() {
        this.refs.forEach(ref => ref.release());
        delete this.rel;
    }
}
class RefImpl {
    source;
    _update;
    constructor(source, _update) {
        this.source = source;
        this._update = _update;
        this.source && this._update?.(this.source.value);
    }
    update(value, old) {
        this._update?.(value, old);
    }
    release() {
        if (this.source == null)
            return;
        this.source.removeref(this);
        this.source = null;
        this._update = null;
    }
}
class ToStringTemplate extends ToString {
    source;
    toref;
    constructor(source, toref) {
        super();
        this.source = source;
        this.toref = toref;
    }
    ref(update) { return this.source.ref(update); }
    toString() { return this.toref(this.source.value); }
}
//
(function (Leaf) {
    class String extends Leaf {
    }
    Leaf.String = String;
    ;
    class Number extends Leaf {
    }
    Leaf.Number = Number;
    ;
    class Boolean extends Leaf {
    }
    Leaf.Boolean = Boolean;
    ;
})(Leaf || (Leaf = {}));
export function leaf(initv, args) {
    return initv instanceof Leaf ? initv : new Leaf(initv, args);
}
(function (leaf) {
    leaf.str = (leaf);
    leaf.num = (leaf);
    leaf.bool = (leaf);
    leaf.string = (leaf);
    leaf.number = (leaf);
    leaf.boolean = (leaf);
    leaf.Str = (leaf);
    leaf.Num = (leaf);
    leaf.Bool = (leaf);
    leaf.String = (leaf);
    leaf.Number = (leaf);
    leaf.Boolean = (leaf);
})(leaf || (leaf = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3RzLXNyYy9tZWgvbW9kZWwvbGVhZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0FBSXhCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFFLEtBQWMsRUFBcUIsRUFBRSxDQUFDLENBQUUsT0FBTyxLQUFLLElBQUksUUFBUSxDQUFFLENBQUM7QUFDeEYsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUUsS0FBYyxFQUFxQixFQUFFLENBQUMsQ0FBRSxPQUFPLEtBQUssSUFBSSxRQUFRLENBQUUsQ0FBQztBQUN4RixNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBRSxLQUFjLEVBQXNCLEVBQUUsQ0FBQyxDQUFFLE9BQU8sS0FBSyxJQUFJLFNBQVMsQ0FBRSxDQUFDO0FBVzFGLE1BQU0sT0FBZ0IsUUFBUTtDQUk3QjtBQUVELE1BQU0sT0FBTyxJQUFXLFNBQVEsUUFBUTtJQUU3QixNQUFNLENBQUs7SUFDWCxHQUFHLENBQWlCO0lBQ3BCLElBQUksR0FBRyxJQUFJLEdBQXFCLENBQUU7SUFFNUMsWUFBYSxLQUFTLEVBQUUsSUFBdUI7UUFFOUMsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLENBQUM7SUFDdEIsQ0FBQztJQUVELFNBQVM7SUFFVCxPQUFPLENBQUUsS0FBK0I7UUFFdkMsT0FBTyxJQUFJLGdCQUFnQixDQUFTLElBQUksRUFBRSxLQUFLLENBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUQsUUFBUSxLQUFLLE9BQU8sTUFBTSxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQyxDQUFDLENBQUM7SUFFNUMsR0FBRyxDQUFFLE1BQXFCO1FBRXpCLE1BQU0sR0FBRyxHQUFHLElB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