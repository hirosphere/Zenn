import { Leaf, ToString } from "../model/leaf.js";
import { Parts } from "./parts.js";
const log = console.log;
class Refs extends Set {
}
//
export class Component {
    e;
    parts;
    refs = new Refs;
    constructor(def, ce) {
        this.e = this.createElement(def, ce);
    }
    createElement(def, ce) {
        const { type, class: className, props, attrs, style, acts, optActs, parts } = def;
        const e = document.createElement(type);
        if (className)
            this.bindClass(e, className);
        if (props)
            this.bindProps(e, props);
        if (attrs)
            this.bindAttrs(e, attrs);
        if (style)
            this.bindStyle(e, style);
        if (acts)
            this.bindActs(e, acts);
        if (optActs)
            this.bindOptActs(e, optActs);
        if (parts)
            Parts.create(this, e, parts);
        if (ce)
            ce.appendChild(e);
        return e;
    }
    // bind opers //
    bindClass(e, def) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(e, subdef);
            return;
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bindText(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindProps(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e, name, value, this.refs);
        }
    }
    bindAttrs(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindAttr(e, name, value, this.refs);
        }
    }
    bindStyle(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e.style, name, value, this.refs);
        }
    }
    bindActs(e, def) {
        for (const [name, act] of Object.entries(def)) {
            e.addEventListener(name, act);
        }
    }
    bindOptActs(e, def) {
        for (const [name, actdef] of Object.entries(def)) {
            const [act, opt] = actdef;
            e.addEventListener(name, act, opt);
            log("optAct", name, opt);
        }
    }
    //  //
    delete() {
        this.parts?.delete();
        delete this.parts;
        this.refs.forEach(ref => ref.release());
        this.refs.clear();
        delete this.e;
    }
}
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref((value) => e.classList.toggle(name, value)));
    }
    else
        e.classList.toggle(name, value);
};
const bindProp = (target, name, value, refs) => {
    if (value instanceof ToString) {
        refs.add(value.ref(() => { target[name] = value.toString(); }));
    }
    else
        target[name] = value;
};
const setAttr = (e, name, value) => {
    if (typeof value == "boolean") {
        value ? e.setAttribute(name, "") : e.removeAttribute(name);
    }
    else {
        e.setAttribute(name, String(value));
    }
};
const bindAttr = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref(() => setAttr(e, name, value.get())));
    }
    else if (value instanceof ToString) {
        refs.add(value.ref(() => setAttr(e, name, value.toString())));
    }
    else
        setAttr(e, name, value);
};
export const bindText = (target, name, text, refs) => {
    if (text instanceof ToString) {
        refs.add(text.ref(() => { target[name] = text.toString(); }));
    }
    else {
        target[name] = text;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9jb21wby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFZLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbkMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4QixNQUFNLElBQUssU0FBUSxHQUFXO0NBQUc7QUFFakMsRUFBRTtBQUVGLE1BQU0sT0FBTyxTQUFTO0lBRXJCLENBQUMsQ0FBYTtJQUNkLEtBQUssQ0FBVztJQUNoQixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUM7SUFFaEIsWUFBYSxHQUFrQixFQUFFLEVBQW1CO1FBRW5ELElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBRSxHQUFHLEVBQUUsRUFBRSxDQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELGFBQWEsQ0FBRSxHQUFrQixFQUFFLEVBQW1CO1FBRXJELE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFJLEdBQUcsQ0FBQztRQUVuRixNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFFLElBQUksQ0FBRSxDQUFDO1FBRXpDLElBQUksU0FBUztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBRSxDQUFDO1FBRWhELElBQUksS0FBSztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ3ZDLElBQUksS0FBSztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ3ZDLElBQUksS0FBSztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ3ZDLElBQUksSUFBSTtZQUFHLElBQUksQ0FBQyxRQUFRLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBRSxDQUFDO1FBQ3BDLElBQUksT0FBTztZQUFHLElBQUksQ0FBQyxXQUFXLENBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBRSxDQUFDO1FBRTdDLElBQUksS0FBSztZQUFHLEtBQUssQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUUsQ0FBQztRQUUzQyxJQUFJLEVBQUU7WUFBRyxFQUFFLENBQUMsV0FBVyxDQUFFLENBQUMsQ0FBRSxDQUFDO1FBRTdCLE9BQU8sQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUVELGdCQUFnQjtJQUVoQixTQUFTLENBQUcsQ0FBVyxFQUFFLEdBQWdCO1FBRXhDLElBQUksR0FBRyxZQUFZLEtBQUssRUFDeEI7WUFDQyxLQUFLLE1BQU0sTUFBTSxJQUFJLEdBQUc7Z0JBQUksSUFBSSxDQUFDLFNBQVMsQ0FBRSxDQUFDLEVBQUUsTUFBTSxDQUFFLENBQUM7WUFDeEQsT0FBTztTQUNQO1FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLElBQUksR0FBRyxZQUFZLElBQUksRUFDakQ7WUFDQyxRQUFRLENBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxDQUFDO1NBQzNDO2FBRUksSUFBSSxPQUFPLEdBQUcsSUFBSSxRQUFRLEVBQy9CO1lBQ0MsS0FBSyxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLEVBQ25EO2dCQUNDLFNBQVMsQ0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFFLENBQUM7YUFDdkM7U0FDRDtJQUNGLENBQUM7SUFFRCxTQUFTLENBQUcsQ0FBVyxFQUFFLEdBQVk7UUFFcEMsS0FBSyxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLEVBQ25EO1lBQ0MsUUFBUSxDQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztTQUN0QztJQUNGLENBQUM7SUFFRCxTQUFTLENBQUcsQ0FBVyxFQUFFLEdBQWdCO1FBRXhDLEtBQUssTUFBTSxDQUFFLElBQUksRUFBRSxLQUFLLENBQUUsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxFQUNuRDtZQUNDLFFBQVEsQ0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFFLENBQUM7U0FDdEM7SUFDRixDQUFDO0lBRUQsU0FBUyxDQUFHLENBQWUsRUFBRSxHQUFnQjtRQUU1QyxLQUFLLE1BQU0sQ0FBRSxJQUFJLEVBQUUsS0FBSyxDQUFFLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUUsRUFDbkQ7WUFDQyxRQUFRLENBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQztTQUM1QztJQUNGLENBQUM7SUFFRCxRQUFRLENBQUcsQ0FBVyxFQUFFLEdBQWtCO1FBRXpDLEtBQUssTUFBTSxDQUFFLElBQUksRUFBRSxHQUFHLENBQUUsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxFQUNqRDtZQUNDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBRSxJQUFJLEVBQUUsR0FBb0IsQ0FBRSxDQUFDO1NBQ2pEO0lBQ0YsQ0FBQztJQUVELFdBQVcsQ0FBRyxDQUFXLEVBQUUsR0FBcUI7UUFFL0MsS0FBSyxNQUFNLENBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLEVBQ3BEO1lBQ0MsTUFBTSxDQUFFLEdBQUcsRUFBRSxHQUFHLENBQUUsR0FBRyxNQUFNLENBQUM7WUFDNUIsQ0FBQyxDQUFDLGdCQUFnQixDQUFFLElBQUksRUFBRSxHQUFvQixFQUFFLEdBQUcsQ0FBRSxDQUFDO1lBRXRELEdBQUcsQ0FBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBRSxDQUFBO1NBQzFCO0lBQ0YsQ0FBQztJQUVELE1BQU07SUFFTixNQUFNO1FBRUwsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBRWxCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNmLENBQUM7Q0FDRDtBQU9ELE1BQU0sU0FBUyxHQUFHLENBQUUsQ0FBVyxFQUFFLElBQWEsRUFBRSxLQUFtQixFQUFFLElBQVcsRUFBRyxFQUFFO0lBRXBGLElBQUksS0FBSyxZQUFZLElBQUksRUFDekI7UUFDQyxJQUFJLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBQyxHQUFHLENBQUUsQ0FBRSxLQUFLLEVBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFFLElBQUksRUFBRSxLQUFLLENBQUUsQ0FBRSxDQUFFLENBQUM7S0FDeEU7O1FBRUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFDO0FBQ3pDLENBQUMsQ0FBQTtBQUVELE1BQU0sUUFBUSxHQUFHLENBQUUsTUFBWSxFQUFFLElBQWEsRUFBRSxLQUFXLEVBQUUsSUFBVyxFQUFHLEVBQUU7SUFFNUUsSUFBSSxLQUFLLFlBQVksUUFBUSxFQUM3QjtRQUNDLElBQUksQ0FBQyxHQUFHLENBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUUsSUFBSSxDQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFFLENBQUUsQ0FBQztLQUNyRTs7UUFFSyxNQUFNLENBQUUsSUFBSSxDQUFFLEdBQUcsS0FBSyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUdGLE1BQU0sT0FBTyxHQUFHLENBQUUsQ0FBVyxFQUFFLElBQWEsRUFBRSxLQUFpQyxFQUFHLEVBQUU7SUFFbkYsSUFBSSxPQUFPLEtBQUssSUFBSSxTQUFTLEVBQzdCO1FBQ0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFFLElBQUksRUFBRSxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBRSxJQUFJLENBQUUsQ0FBQztLQUMvRDtTQUdEO1FBQ0MsQ0FBQyxDQUFDLFlBQVksQ0FBRSxJQUFJLEVBQUUsTUFBTSxDQUFFLEtBQUssQ0FBRSxDQUFFLENBQUM7S0FDeEM7QUFDRixDQUFDLENBQUE7QUFFRCxNQUFNLFFBQVEsR0FBRyxDQUFFLENBQVcsRUFBRSxJQUFhLEVBQUUsS0FBaUIsRUFBRSxJQUFXLEVBQUcsRUFBRTtJQUVqRixJQUFJLEtBQUssWUFBWSxJQUFJLEVBQ3pCO1FBQ0MsSUFBSSxDQUFDLEdBQUcsQ0FBRSxLQUFLLENBQUMsR0FBRyxDQUFFLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBRSxDQUFFLENBQUUsQ0FBQztLQUMvRDtTQUVJLElBQUksS0FBSyxZQUFZLFFBQVEsRUFDbEM7UUFDQyxJQUFJLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBQyxHQUFHLENBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFFLENBQUUsQ0FBRSxDQUFDO0tBQ3BFOztRQUVJLE9BQU8sQ0FBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBRSxDQUFDO0FBQ2hDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxDQUFFLE1BQVksRUFBRSxJQUFhLEVBQUUsSUFBVSxFQUFFLElBQVcsRUFBRyxFQUFFO0lBRWxGLElBQUksSUFBSSxZQUFZLFFBQVEsRUFDNUI7UUFDQyxJQUFJLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUUsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFFLElBQUksQ0FBRSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQSxDQUFDLENBQUMsQ0FBRSxDQUFFLENBQUM7S0FDbkU7U0FHRDtRQUNDLE1BQU0sQ0FBRSxJQUFJLENBQUUsR0FBRyxJQUFJLENBQUM7S0FDdEI7QUFDRixDQUFDLENBQUMifQ==