import { Leaf, ToString } from "../model/leaf.js";
import { Parts } from "./parts.js";
const log = console.log;
class Refs extends Set {
}
//
export class Component {
    e = null;
    partsList;
    refs = new Refs;
    constructor(def, ce) {
        this.e = this.createElement(def, ce);
    }
    createElement(def, ce) {
        const { type, class: className, props, attrs, style, acts, optActs, parts } = def;
        const e = document.createElement(type);
        if (className)
            this.bindClass(e, className);
        if (props)
            this.bindProps(e, props);
        if (attrs)
            this.bindAttrs(e, attrs);
        if (style)
            this.bindStyle(e, style);
        if (acts)
            this.bindActs(e, acts);
        if (optActs)
            this.bindOptActs(e, optActs);
        if (parts)
            Parts.create(this, e, parts);
        if (ce)
            ce.appendChild(e);
        return e;
    }
    // bind opers //
    bindClass(e, def) {
        if (def instanceof Array) {
            for (const subdef of def)
                this.bindClass(e, subdef);
            return;
        }
        if (typeof def == "string" || def instanceof Leaf) {
            bindText(e, "className", def, this.refs);
        }
        else if (typeof def == "object") {
            for (const [name, value] of Object.entries(def)) {
                bindClass(e, name, value, this.refs);
            }
        }
    }
    bindProps(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e, name, value, this.refs);
        }
    }
    bindAttrs(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindAttr(e, name, value, this.refs);
        }
    }
    bindStyle(e, def) {
        for (const [name, value] of Object.entries(def)) {
            bindText(e.style, name, value, this.refs);
        }
    }
    bindActs(e, def) {
        for (const [name, act] of Object.entries(def)) {
            e.addEventListener(name, act);
        }
    }
    bindOptActs(e, def) {
        for (const [name, actdef] of Object.entries(def)) {
            const [act, opt] = actdef;
            e.addEventListener(name, act, opt);
            log("optAct", name, opt);
        }
    }
    //  //
    delete() {
        this.partsList?.delete();
        delete this.partsList;
        this.e = null;
    }
}
const bindClass = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref((value) => e.classList.toggle(name, value)));
    }
    else
        e.classList.toggle(name, value);
};
const bindProp = (target, name, value, refs) => {
    if (value instanceof ToString) {
        refs.add(value.ref(() => { target[name] = value.toString(); }));
    }
    else
        target[name] = value;
};
const setAttr = (e, name, value) => {
    if (typeof value == "boolean") {
        value ? e.setAttribute(name, "") : e.removeAttribute(name);
    }
    else {
        e.setAttribute(name, String(value));
    }
};
const bindAttr = (e, name, value, refs) => {
    if (value instanceof Leaf) {
        refs.add(value.ref(() => setAttr(e, name, value.get())));
    }
    else if (value instanceof ToString) {
        refs.add(value.ref(() => setAttr(e, name, value.toString())));
    }
    else
        setAttr(e, name, value);
};
export const bindText = (target, name, text, refs) => {
    if (text instanceof ToString) {
        refs.add(text.ref(() => { target[name] = text.toString(); }));
    }
    else {
        target[name] = text;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90cy1zcmMvbWVoL2RvbS9jb21wby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFZLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTVELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbkMsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUV4QixNQUFNLElBQUssU0FBUSxHQUFXO0NBQUc7QUFFakMsRUFBRTtBQUVGLE1BQU0sT0FBTyxTQUFTO0lBRXJCLENBQUMsR0FBb0IsSUFBSSxDQUFDO0lBQzFCLFNBQVMsQ0FBVztJQUNwQixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUM7SUFFaEIsWUFBYSxHQUFrQixFQUFFLEVBQW1CO1FBRW5ELElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBRSxHQUFHLEVBQUUsRUFBRSxDQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELGFBQWEsQ0FBRSxHQUFrQixFQUFFLEVBQW1CO1FBRXJELE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFJLEdBQUcsQ0FBQztRQUVuRixNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFFLElBQUksQ0FBRSxDQUFDO1FBRXpDLElBQUksU0FBUztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBRSxDQUFDO1FBRWhELElBQUksS0FBSztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBRSxDQUFDO1FBQ3ZDLElBQUksS0FBSztZQUFHLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBRSxD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